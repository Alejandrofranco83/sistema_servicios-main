name: Auto Update Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g., 1.2.2)'
        required: true
        type: string
      release_notes:
        description: 'Release notes (optional)'
        required: false
        type: string
        default: 'Mejoras y correcciones de errores'

permissions:
  contents: write
  actions: write

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4
        
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.event.inputs.version }}
          name: "Sistema Servicios v${{ github.event.inputs.version }}"
          draft: false
          prerelease: false
          generate_release_notes: false
          body: |
            ## üöÄ Actualizaci√≥n Autom√°tica v${{ github.event.inputs.version }}
            
            ${{ github.event.inputs.release_notes }}
            
            ### üì¶ Instalaci√≥n:
            - **Windows**: Se actualizar√° autom√°ticamente
            - **Linux (Fedora/CentOS)**: Se actualizar√° autom√°ticamente (RPM)
            - **Linux (Debian/Ubuntu)**: Se actualizar√° autom√°ticamente (DEB)
            
            ### üîÑ Proceso de actualizaci√≥n:
            1. Recibir√°s una notificaci√≥n en la aplicaci√≥n
            2. Haz clic en "Actualizar" cuando est√©s listo
            3. La actualizaci√≥n se descarga en segundo plano
            4. Instala cuando sea conveniente para ti

  build-windows:
    needs: create-release
    runs-on: windows-latest
    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Instalar dependencias
      working-directory: frontend
      run: npm ci
        
    - name: Actualizar versi√≥n
      working-directory: frontend
      run: |
        $currentVersion = (Get-Content package.json | ConvertFrom-Json).version
        $targetVersion = "${{ github.event.inputs.version }}"
        Write-Host "Current version: $currentVersion"
        Write-Host "Target version: $targetVersion"
        if ($currentVersion -ne $targetVersion) {
          npm version $targetVersion --no-git-tag-version
          Write-Host "Version updated to $targetVersion"
        } else {
          Write-Host "Version already at $targetVersion, skipping update"
        }
        
    - name: Build React
      working-directory: frontend
      env:
        CI: false
      run: npm run build
      
    - name: Build Windows
      working-directory: frontend
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: npm run release -- --win --publish=onTagOrDraft

  build-linux:
    needs: create-release
    runs-on: ubuntu-latest
    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Instalar dependencias
      working-directory: frontend
      run: npm ci
        
    - name: Actualizar versi√≥n
      working-directory: frontend
      run: |
        current_version=$(node -p "require('./package.json').version")
        target_version="${{ github.event.inputs.version }}"
        echo "Current version: $current_version"
        echo "Target version: $target_version"
        if [ "$current_version" != "$target_version" ]; then
          npm version $target_version --no-git-tag-version
          echo "Version updated to $target_version"
        else
          echo "Version already at $target_version, skipping update"
        fi
        
    - name: Build React
      working-directory: frontend
      env:
        CI: false
      run: npm run build
      
    - name: Build Linux (Fedora RPM + DEB + AppImage)
      working-directory: frontend
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: npm run release -- --linux --publish=onTagOrDraft

  notify-completion:
    needs: [create-release, build-windows, build-linux]
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Notify Results
      run: |
        if [[ "${{ needs.build-windows.result }}" == "success" && "${{ needs.build-linux.result }}" == "success" ]]; then
          echo "‚úÖ Actualizaci√≥n v${{ github.event.inputs.version }} publicada exitosamente"
          echo "üîÑ Los usuarios recibir√°n la notificaci√≥n autom√°ticamente"
        else
          echo "‚ùå Algunos builds fallaron:"
          echo "Windows: ${{ needs.build-windows.result }}"
          echo "Linux: ${{ needs.build-linux.result }}"
        fi 