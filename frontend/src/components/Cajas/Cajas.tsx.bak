import React, { useState, useEffect } from 'react';
import { 
  Container, Typography, Paper, Box, Button, Grid, 
  Table, TableBody, TableCell, TableContainer, TableHead, TableRow,
  Tabs, Tab, TextField, FormControl, InputLabel, Select, MenuItem,
  SelectChangeEvent, CircularProgress, Snackbar, Alert, Divider,
  IconButton, Tooltip, Accordion, AccordionSummary, AccordionDetails,
  Dialog, DialogTitle, DialogContent, DialogActions, DialogContentText,
  FormHelperText, List, ListItem, ListItemText, ListItemIcon
} from '@mui/material';
import AddIcon from '@mui/icons-material/Add';
import VisibilityIcon from '@mui/icons-material/Visibility';
import CloseIcon from '@mui/icons-material/Close';
import AssignmentIcon from '@mui/icons-material/Assignment';
import MonetizationOnIcon from '@mui/icons-material/MonetizationOn';
import LockOpenIcon from '@mui/icons-material/LockOpen';
import ExpandMoreIcon from '@mui/icons-material/ExpandMore';
import AccountBalanceIcon from '@mui/icons-material/AccountBalance';
import PrintIcon from '@mui/icons-material/Print';
import AtmIcon from '@mui/icons-material/Atm';
import MoneyOffIcon from '@mui/icons-material/MoneyOff';
import PaymentsIcon from '@mui/icons-material/Payments';
import { format } from 'date-fns';
import { es } from 'date-fns/locale';
import { useSucursal } from '../../contexts/SucursalContext';
import { useAuth } from '../../contexts/AuthContext';
import axios from 'axios';
import AttachFileIcon from '@mui/icons-material/AttachFile';
import EditIcon from '@mui/icons-material/Edit';
import DeleteIcon from '@mui/icons-material/Delete';
import { handleInputClick } from '../../utils/inputUtils';
import { personaService, Persona } from '../../services/personaService';
import PersonIcon from '@mui/icons-material/Person';

// Interfaces
interface Denominacion {
  valor: number;
  cantidad: number;
  moneda: 'PYG' | 'BRL' | 'USD';
}

interface SaldoServicio {
  servicio: string;
  monto: number;
}

interface MovimientoServicio {
  servicio: string;
  tipo: 'envio' | 'retiro' | 'pago';
  monto: number;
  comprobante?: string;
}

interface Conteo {
  denominaciones: Denominacion[];
  total: {
    PYG: number;
    BRL: number;
    USD: number;
  };
}

interface Comprobantes {
  minicargas?: string;
  maxicargas?: string;
  recargaClaro?: string;
  retirosTigoMoney?: string;
  retirosBilleteraPersonal?: string;
  retirosBilleteraClaro?: string;
  cargasBilleteraTigo?: string;
  cargasBilleteraPersonal?: string;
  cargasBilleteraClaro?: string;
}

interface Maletin {
  id: string;
  codigo: string;
  sucursalId: string;
  sucursal?: {
    id: string;
    nombre: string;
  };
}

interface User {
  id: string;
  username?: string;
  name?: string;  // Propiedades que pueden existir en el objeto user
  email?: string;
}

interface Caja {
  id: string;
  sucursalId: string;
  sucursal?: {
    id: string;
    nombre: string;
    codigo: string;
    direccion: string;
    telefono: string;
    email?: string;
  };
  usuarioId: string;
  usuario: string;
  fechaApertura: string;
  fechaCierre?: string;
  estado: 'abierta' | 'cerrada';
  maletinId: string;
  
  // Saldos iniciales
  saldoInicial: Conteo;
  saldosServiciosInicial: SaldoServicio[];
  
  // Saldos finales
  saldoFinal?: Conteo;
  saldosServiciosFinal?: SaldoServicio[];
  
  // Movimientos durante el día
  movimientosServicios?: MovimientoServicio[];
  
  // Comprobantes (urls de las imágenes)
  comprobantes?: Comprobantes;
  
  createdAt: string;
  updatedAt: string;
}

// Valores por defecto
const denominacionesGuaranies: Denominacion[] = [
  { valor: 100000, cantidad: 0, moneda: 'PYG' },
  { valor: 50000, cantidad: 0, moneda: 'PYG' },
  { valor: 20000, cantidad: 0, moneda: 'PYG' },
  { valor: 10000, cantidad: 0, moneda: 'PYG' },
  { valor: 5000, cantidad: 0, moneda: 'PYG' },
  { valor: 2000, cantidad: 0, moneda: 'PYG' },
  { valor: 1000, cantidad: 0, moneda: 'PYG' },
  { valor: 500, cantidad: 0, moneda: 'PYG' }
];

const denominacionesReales: Denominacion[] = [
  { valor: 200, cantidad: 0, moneda: 'BRL' },
  { valor: 100, cantidad: 0, moneda: 'BRL' },
  { valor: 50, cantidad: 0, moneda: 'BRL' },
  { valor: 20, cantidad: 0, moneda: 'BRL' },
  { valor: 10, cantidad: 0, moneda: 'BRL' },
  { valor: 5, cantidad: 0, moneda: 'BRL' },
  { valor: 2, cantidad: 0, moneda: 'BRL' },
  { valor: 1, cantidad: 0, moneda: 'BRL' },
  { valor: 0.50, cantidad: 0, moneda: 'BRL' },
  { valor: 0.25, cantidad: 0, moneda: 'BRL' },
  { valor: 0.10, cantidad: 0, moneda: 'BRL' },
  { valor: 0.05, cantidad: 0, moneda: 'BRL' }
];

const denominacionesDolares: Denominacion[] = [
  { valor: 100, cantidad: 0, moneda: 'USD' },
  { valor: 50, cantidad: 0, moneda: 'USD' },
  { valor: 20, cantidad: 0, moneda: 'USD' },
  { valor: 10, cantidad: 0, moneda: 'USD' },
  { valor: 5, cantidad: 0, moneda: 'USD' },
  { valor: 1, cantidad: 0, moneda: 'USD' }
];

const serviciosIniciales: SaldoServicio[] = [
  { servicio: 'Minicarga', monto: 0 },
  { servicio: 'Maxicarga', monto: 0 },
  { servicio: 'Recarga Claro', monto: 0 },
  { servicio: 'Tigo Money', monto: 0 },
  { servicio: 'Billetera Personal', monto: 0 },
  { servicio: 'Billetera Claro', monto: 0 }
];

const cajaInicial = {
  sucursalId: '',
  usuarioId: '1', // Esto vendría del contexto de autenticación
  usuario: 'Usuario Actual', // Esto vendría del contexto de autenticación
  maletinId: '', // Nuevo campo para el maletín
  saldoInicial: {
    denominaciones: [
      ...denominacionesGuaranies.map(d => ({...d, cantidad: 0})),
      ...denominacionesReales.map(d => ({...d, cantidad: 0})),
      ...denominacionesDolares.map(d => ({...d, cantidad: 0}))
    ],
    total: {
      PYG: 0,
      BRL: 0,
      USD: 0
    }
  },
  saldosServiciosInicial: serviciosIniciales.map(s => ({...s, monto: 0}))
};

// Interface para operaciones bancarias
interface OperacionBancaria {
  id?: string;
  tipo: 'pos' | 'transferencia';
  cuentaBancariaId?: string;
  cuentaBancaria?: string;
  codigoBarrasPos?: string;
  posDescripcion?: string;
  numeroComprobante?: string;
  monto: number;
  montoACobrar?: number;
  tipoServicio: string;
  archivoAdjunto?: File | null;
  nombreArchivo?: string;
  fecha?: string;
}

// Definición de tipos de servicio para operaciones bancarias
const tiposServicio = [
  'Tigo Mini Carga',
  'Tigo Giros Enviados',
  'Tigo Retiros',
  'Tigo Carga Billeteras',
  'Personal Maxi Carga',
  'Personal Giros Enviados',
  'Personal Retiros',
  'Personal Carga Billeteras',
  'Claro Recarga',
  'Claro Giros Enviados',
  'Claro Retiros',
  'Claro Carga Billeteras',
  'Aquí Pago - Pagos',
  'Aquí Pago - Retiros',
  'Wepa Guaraníes - Pagos',
  'Wepa Guaraníes - Retiros',
  'Wepa Dólares - Pagos',
  'Wepa Dólares - Retiros'
];

// Componente principal
const Cajas: React.FC = () => {
  // Estado para el error del form
  const [errorMessage, setErrorMessage] = useState<string | null>(null);
  const [successMessage, setSuccessMessage] = useState<string | null>(null);
  const [loading, setLoading] = useState(false);
  const [cajas, setCajas] = useState<Caja[]>([]);
  const [maletines, setMaletines] = useState<Maletin[]>([]);
  const [tabIndex, setTabIndex] = useState(0);
  const [formApertura, setFormApertura] = useState<any>(cajaInicial);
  const [cajaSeleccionada, setCajaSeleccionada] = useState<Caja | null>(null);
  const [maletinError, setMaletinError] = useState<boolean>(false);
  
  // Estado para retiros
  const [retirosDialogOpen, setRetirosDialogOpen] = useState(false);
  const [listaRetirosDialogOpen, setListaRetirosDialogOpen] = useState(false);
  const [retiros, setRetiros] = useState<{
    id: string;
    fecha: string;
    personaNombre: string;
    montoPYG: number;
    montoBRL: number;
    montoUSD: number;
    observacion: string;
  }[]>([]);
  
  // Estado para pagos
  const [pagosDialogOpen, setPagosDialogOpen] = useState(false);
  const [listaPagosDialogOpen, setListaPagosDialogOpen] = useState(false);
  const [pagos, setPagos] = useState<{
    id: string;
    fecha: string;
    personaNombre: string;
    montoPYG: number;
    montoBRL: number;
    montoUSD: number;
    observacion: string;
  }[]>([]);
  
  const [formRetiro, setFormRetiro] = useState<{
    montoPYG: string;
    montoBRL: string;
    montoUSD: string;
    personaId: string;
    personaNombre: string;
    observacion: string;
  }>({
    montoPYG: '',
    montoBRL: '',
    montoUSD: '',
    personaId: '',
    personaNombre: '',
    observacion: ''
  });
  
  // Estado para el formulario de pagos
  const [formPago, setFormPago] = useState<{
    montoPYG: string;
    montoBRL: string;
    montoUSD: string;
    personaId: string;
    personaNombre: string;
    observacion: string;
  }>({
    montoPYG: '',
    montoBRL: '',
    montoUSD: '',
    personaId: '',
    personaNombre: '',
    observacion: ''
  });
  
  // Estado para confirmación de eliminación de retiros
  const [confirmarEliminarRetiroId, setConfirmarEliminarRetiroId] = useState<string | null>(null);
  
  // Estado para confirmación de eliminación de pagos
  const [confirmarEliminarPagoId, setConfirmarEliminarPagoId] = useState<string | null>(null);
  
  // Estado para búsqueda de personas
  const [personasBusqueda, setPersonasBusqueda] = useState<{id: string; nombre: string; tipo: 'funcionario' | 'vip'}[]>([]);
  const [busquedaPersona, setBusquedaPersona] = useState('');
  const [buscandoPersonas, setBuscandoPersonas] = useState(false);
  const [personasDisponibles, setPersonasDisponibles] = useState<Persona[]>([]);
  const [personaSeleccionada, setPersonaSeleccionada] = useState<Persona | null>(null);
  
  // Importar contextos
  const { sucursalActual } = useSucursal();
  const { user } = useAuth() as { user: User | null };
  
  // Estados para el diálogo de operaciones bancarias
  const [operacionesBancariasDialogOpen, setOperacionesBancariasDialogOpen] = useState(false);
  const [formOperacionDialogOpen, setFormOperacionDialogOpen] = useState(false);
  const [operacionesBancarias, setOperacionesBancarias] = useState<OperacionBancaria[]>([]);
  const [formOperacion, setFormOperacion] = useState<OperacionBancaria>({
    tipo: 'pos',
    monto: 0,
    montoACobrar: 0,
    tipoServicio: '',
    archivoAdjunto: null,
    codigoBarrasPos: '',
    posDescripcion: '',
    numeroComprobante: ''
  });
  
  // Estados para cuentas bancarias y dispositivos POS (simulados por ahora)
  const [cuentasBancarias, setCuentasBancarias] = useState<{id: string; banco: string; numeroCuenta: string; moneda: string}[]>([]);
  const [dispositivosPos, setDispositivosPos] = useState<{id: string; nombre: string; codigoBarras: string}[]>([]);
  
  // Referencias a los campos de entrada
  const [inputRefs, setInputRefs] = useState<{ [key: string]: any }>({});
  
  // Registrar referencia a un campo de entrada
  const registerInputRef = (id: string, ref: HTMLInputElement | HTMLButtonElement | null) => {
    if (ref) {
      setInputRefs(prev => {
        // Si ya existe, no hacemos nada
        if (prev[id] === ref) {
          return prev;
        }
        return {
          ...prev,
          [id]: ref
        };
      });
    }
  };
  
  // Función para manejar el evento Enter
  const handleKeyDown = (event: React.KeyboardEvent<HTMLDivElement | HTMLInputElement>, nextFieldId: string) => {
    if (event.key === 'Enter') {
      event.preventDefault();
      
      // Usar setTimeout para asegurar que esto ocurra después de cualquier actualización de estado
      setTimeout(() => {
        const nextField = inputRefs[nextFieldId];
        if (nextField) {
          nextField.focus();
          // Seleccionar todo el texto del campo (como hace el tabulador)
          if (nextField.select) {
            nextField.select();
          }
        } else {
          console.log(`Campo con ID ${nextFieldId} no encontrado`);
        }
      }, 0);
    }
  };
  
  // Crear IDs para los campos de entrada
  const getDenominacionFieldId = (moneda: string, valor: number): string => `${moneda}-${valor}`;
  const getServicioFieldId = (servicio: string): string => `servicio-${servicio.replace(/\s+/g, '-').toLowerCase()}`;

  // Actualizar el formulario con los datos del usuario autenticado
  useEffect(() => {
    if (user) {
      setFormApertura((prev: any) => ({
        ...prev,
        usuarioId: user.id,
        usuario: user.name || user.username || user.email || 'Usuario del Sistema'
      }));
    }
  }, [user]);

  // Estado para maletines en uso
  const [maletinesEnUso, setMaletinesEnUso] = useState<string[]>([]);
  
  // Cargar las cajas de la sucursal actual
  useEffect(() => {
    if (sucursalActual) {
      loadCajas(sucursalActual.id);
    }
  }, [sucursalActual]);

  // Actualizar la lista de maletines en uso cuando cambien las cajas
  useEffect(() => {
    // Filtrar cajas abiertas y extraer sus IDs de maletín
    const maletinesUsados = cajas
      .filter(caja => caja.estado === 'abierta')
      .map(caja => caja.maletinId);
    
    setMaletinesEnUso(maletinesUsados);
  }, [cajas]);

  // Cargar los maletines de la sucursal actual
  useEffect(() => {
    if (sucursalActual) {
      loadMaletines(sucursalActual.id);
    }
  }, [sucursalActual]);

  const loadCajas = async (sucursalId: string) => {
    try {
      setLoading(true);
      
      // Convertir el ID de sucursal de 'SUC001' a '1'
      let backendSucursalId = sucursalId;
      if (sucursalId.startsWith('SUC')) {
        // Extraer el número y convertirlo a string (SUC001 -> 1)
        const numericId = parseInt(sucursalId.replace('SUC', ''), 10);
        backendSucursalId = numericId.toString();
      }
      
      console.log(`Cargando cajas para sucursal ID backend: ${backendSucursalId}`);
      
      const response = await axios.get(`/api/cajas/sucursal/${backendSucursalId}`);
      
      // Ordenar cajas por fecha de apertura, de más reciente a menos reciente
      const cajasOrdenadas = [...response.data].sort((a, b) => {
        return new Date(b.fechaApertura).getTime() - new Date(a.fechaApertura).getTime();
      });
      
      setCajas(cajasOrdenadas);
    } catch (error) {
      console.error('Error al cargar cajas:', error);
      setErrorMessage('Error al cargar las cajas de la sucursal');
    } finally {
      setLoading(false);
    }
  };

  const loadMaletines = async (sucursalId: string) => {
    try {
      console.log(`Intentando cargar maletines para sucursal ID: ${sucursalId}`);
      console.log(`Detalles de la sucursal actual:`, sucursalActual);
      
      // Convertir el ID de sucursal de 'SUC001' a '1'
      let backendSucursalId = sucursalId;
      if (sucursalId.startsWith('SUC')) {
        // Extraer el número y convertirlo a string (SUC001 -> 1)
        const numericId = parseInt(sucursalId.replace('SUC', ''), 10);
        backendSucursalId = numericId.toString();
      }
      
      console.log(`ID convertido para backend: ${backendSucursalId}`);
      
      const response = await axios.get(`/api/maletines/sucursal/${backendSucursalId}`);
      console.log('Respuesta de API maletines:', response.data);
      setMaletines(response.data);
      
      if (response.data.length === 0) {
        console.log(`No se encontraron maletines para la sucursal ID: ${backendSucursalId}`);
      }
    } catch (error) {
      console.error('Error al cargar maletines:', error);
      setMaletines([]);
    }
  };

  const handleTabChange = (_event: React.SyntheticEvent, newValue: number) => {
    setTabIndex(newValue);
  };

  const handleVerDetalle = (caja: Caja) => {
    setCajaSeleccionada(caja);
    setTabIndex(2); // Ir a la pestaña de detalles
  };

  const handleRetiros = (caja: Caja) => {
    setCajaSeleccionada(caja);
    
    // Cargar retiros (simulado por ahora)
    // En un caso real, estos retiros vendrían de la API
    setRetiros([
      {
        id: 'RET001',
        fecha: '2023-10-15 09:30',
        personaNombre: 'Juan Pérez',
        montoPYG: 150000,
        montoBRL: 0,
        montoUSD: 0,
        observacion: 'Retiro para compra de materiales'
      },
      {
        id: 'RET002',
        fecha: '2023-10-15 10:45',
        personaNombre: 'María González',
        montoPYG: 300000,
        montoBRL: 0,
        montoUSD: 0,
        observacion: 'Retiro para gastos administrativos'
      }
    ]);
    setListaRetirosDialogOpen(true);
  };
  
  // Función para abrir el formulario de nuevo retiro
  const handleNuevoRetiro = () => {
    // Reiniciar el formulario de retiro
    setFormRetiro({
      montoPYG: '',
      montoBRL: '',
      montoUSD: '',
      personaId: '',
      personaNombre: '',
      observacion: ''
    });
    // Cargar personas elegibles
    loadPersonasElegibles();
    setRetirosDialogOpen(true);
    setListaRetirosDialogOpen(false);
  };
  
  // Función para cerrar el diálogo de lista de retiros
  const handleCloseListaRetiros = () => {
    setListaRetirosDialogOpen(false);
  };
  
  // Función para eliminar un retiro
  const handleEliminarRetiro = (id: string) => {
    setConfirmarEliminarRetiroId(id);
  };
  
  // Función para confirmar la eliminación de un retiro
  const confirmarEliminacionRetiro = () => {
    if (confirmarEliminarRetiroId) {
      setRetiros(prev => prev.filter(ret => ret.id !== confirmarEliminarRetiroId));
      setSuccessMessage('Retiro eliminado correctamente');
      
      // Limpiar el mensaje después de 3 segundos
      setTimeout(() => {
        setSuccessMessage(null);
      }, 3000);
      
      // Cerrar el diálogo de confirmación
      setConfirmarEliminarRetiroId(null);
    }
  };
  
  // Función para cancelar la eliminación de un retiro
  const cancelarEliminacionRetiro = () => {
    setConfirmarEliminarRetiroId(null);
  };

  // Cargar personas elegibles para retiros (solo Funcionarios y VIP)
  const loadPersonasElegibles = async () => {
    try {
      setBuscandoPersonas(true);
      const data = await personaService.getPersonas();
      // Filtrar solo funcionarios y VIP
      const personasElegibles = data.filter(
        persona => persona.tipo === 'Funcionario' || persona.tipo === 'Vip'
      );
      setPersonasDisponibles(personasElegibles);
      setPersonasBusqueda(personasElegibles.map(p => ({
        id: p.id.toString(),
        nombre: p.nombreCompleto,
        tipo: p.tipo.toLowerCase() as 'funcionario' | 'vip'
      })));
      setBuscandoPersonas(false);
    } catch (error) {
      console.error('Error al cargar personas elegibles:', error);
      setBuscandoPersonas(false);
    }
  };

  // Función para manejar cambios en el formulario de retiro
  const handleRetiroChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setFormRetiro(prev => ({
      ...prev,
      [name]: value
    }));
  };

  // Función para guardar un retiro
  const handleGuardarRetiro = async () => {
    if (!cajaSeleccionada) return;
    
    // Convertir los valores formateados a números
    const montoPYG = formRetiro.montoPYG ? parseFloat(formRetiro.montoPYG.replace(/\./g, '')) : 0;
    const montoBRL = formRetiro.montoBRL ? parseFloat(formRetiro.montoBRL.replace(/\./g, '').replace(',', '.')) : 0;
    const montoUSD = formRetiro.montoUSD ? parseFloat(formRetiro.montoUSD.replace(/\./g, '').replace(',', '.')) : 0;
    
    // Verificar que al menos un monto sea mayor que cero
    if (montoPYG <= 0 && montoBRL <= 0 && montoUSD <= 0) {
      setErrorMessage('Debe ingresar al menos un monto en alguna moneda para realizar el retiro');
      return;
    }
    
    if (!formRetiro.personaId) {
      setErrorMessage('Debe seleccionar una persona para registrar el retiro');
      return;
    }

    try {
      setLoading(true);
      
      // Aquí iría la lógica para guardar el retiro en la API
      // Por ejemplo, crear un FormData y enviarlo al endpoint correspondiente
      const formData = new FormData();
      formData.append('cajaId', cajaSeleccionada.id);
      formData.append('montoPYG', montoPYG.toString());
      formData.append('montoBRL', montoBRL.toString());
      formData.append('montoUSD', montoUSD.toString());
      formData.append('personaId', formRetiro.personaId);
      formData.append('personaNombre', formRetiro.personaNombre);
      formData.append('observacion', formRetiro.observacion);
      
      // Simular la llamada a la API (reemplazar con la llamada real)
      // await axios.post('/api/cajas/retiros', formData);
      
      console.log('Retiro guardado:', {
        cajaId: cajaSeleccionada.id,
        montoPYG,
        montoBRL,
        montoUSD,
        personaId: formRetiro.personaId,
        personaNombre: formRetiro.personaNombre,
        observacion: formRetiro.observacion
      });
      
      setSuccessMessage('Retiro registrado correctamente');
      setRetirosDialogOpen(false);
      
      // Recargar los datos de la caja para reflejar el retiro
      if (sucursalActual) {
        loadCajas(sucursalActual.id);
      }
    } catch (error) {
      console.error('Error al registrar retiro:', error);
      setErrorMessage('Error al registrar el retiro. Intente nuevamente.');
    } finally {
      setLoading(false);
    }
  };
  
  // Función para buscar personas
  const buscarPersonas = async (termino: string) => {
    if (!termino.trim() || termino.length < 3) {
      setPersonasBusqueda([]);
      return;
    }
    
    try {
      setBuscandoPersonas(true);
      
      // Filtrar las personas ya cargadas
      const filtered = personasDisponibles.filter(p => 
        p.nombreCompleto.toLowerCase().includes(termino.toLowerCase()) ||
        p.documento.toLowerCase().includes(termino.toLowerCase())
      );
      
      setPersonasBusqueda(filtered.map(p => ({
        id: p.id.toString(),
        nombre: p.nombreCompleto,
        tipo: p.tipo.toLowerCase() as 'funcionario' | 'vip'
      })));
      
      setBuscandoPersonas(false);
    } catch (error) {
      console.error('Error al buscar personas:', error);
      setPersonasBusqueda([]);
      setBuscandoPersonas(false);
    }
  };

  // Función para seleccionar una persona
  const seleccionarPersona = (persona: {id: string; nombre: string; tipo: 'funcionario' | 'vip'}) => {
    const personaObj = personasDisponibles.find(p => p.id.toString() === persona.id);
    
    if (personaObj) {
      setPersonaSeleccionada(personaObj);
      setFormRetiro(prev => ({
        ...prev,
        personaId: persona.id,
        personaNombre: persona.nombre
      }));
    }
    
    setPersonasBusqueda([]);
    setBusquedaPersona('');
  };

  // Función para manejar cambios en la búsqueda de personas
  const handleBusquedaPersonaChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const valor = e.target.value.toUpperCase();
    setBusquedaPersona(valor);
    buscarPersonas(valor);
  };

  // Función para cerrar caja
  const handleCerrarCaja = (caja: Caja) => {
    setCajaSeleccionada(caja);
    
    if (caja.estado === 'abierta') {
      // Si la caja está abierta, iniciar proceso de cierre
      setFormCierre(inicializarFormularioCierre(caja));
      setTabIndex(3); // Ir a la pestaña de cierre de caja
    } else {
      // Si la caja está cerrada, mostrar datos de cierre
      setVerDatosCierre(true);
      setTabIndex(5); // Ir a una nueva pestaña para ver datos de cierre
    }
  };

  // Función para reiniciar el formulario de apertura a valores iniciales
  const resetFormularioApertura = () => {
    // Clonar profundamente las estructuras para asegurar que no hay referencias compartidas
    const nuevoFormulario = {
      ...cajaInicial,
      usuarioId: user?.id || '1',
      usuario: user?.name || user?.username || user?.email || 'Usuario del Sistema',
      saldoInicial: {
        denominaciones: [
          ...denominacionesGuaranies.map(d => ({...d, cantidad: 0})),
          ...denominacionesReales.map(d => ({...d, cantidad: 0})),
          ...denominacionesDolares.map(d => ({...d, cantidad: 0}))
        ],
        total: {
          PYG: 0,
          BRL: 0,
          USD: 0
        }
      },
      saldosServiciosInicial: serviciosIniciales.map(s => ({...s, monto: 0}))
    };
    
    setFormApertura(nuevoFormulario);
  };

  const handleNuevaCaja = () => {
    // Reiniciar el formulario con los valores iniciales
    resetFormularioApertura();
    setTabIndex(1); // Ir a la pestaña de abrir caja
  };

  const handleVolverAListado = () => {
    setTabIndex(0); // Volver a la lista de cajas
    setCajaSeleccionada(null); // Limpiar la caja seleccionada
    setVerDatosApertura(false); // Resetear la vista de apertura
    setVerDatosCierre(false); // Resetear la vista de cierre
    setCierreEditable(false); // Resetear el modo de edición de cierre
    setFormEdicionCierre(null); // Limpiar el formulario de edición de cierre
    resetFormularioApertura(); // Reiniciar el formulario al volver al listado
  };

  const calcularTotalDenominaciones = (denominaciones: Denominacion[], moneda: 'PYG' | 'BRL' | 'USD'): number => {
    return denominaciones
      .filter(d => d.moneda === moneda)
      .reduce((total, denom) => total + (denom.valor * denom.cantidad), 0);
  };

  // Manejadores para el formulario de apertura
  const handleDenominacionChange = (index: number, valor: number) => {
    const denominaciones = [...formApertura.saldoInicial.denominaciones];
    denominaciones[index].cantidad = valor;
    
    // Recalcular totales
    const totales = {
      PYG: calcularTotalDenominaciones(denominaciones, 'PYG'),
      BRL: calcularTotalDenominaciones(denominaciones, 'BRL'),
      USD: calcularTotalDenominaciones(denominaciones, 'USD')
    };

    setFormApertura({
      ...formApertura,
      saldoInicial: {
        denominaciones,
        total: totales
      }
    });
  };

  // Función para formatear un número como texto con separador de miles
  const formatearNumero = (numero: number): string => {
    return new Intl.NumberFormat('es-PY').format(numero);
  };

  // Función para convertir texto con formato a número
  const textoANumero = (texto: string): number => {
    if (!texto) return 0;
    return parseInt(texto.replace(/\./g, '')) || 0;
  };

  // Modificar la función handleServicioChange para manejar correctamente el formato de números
  const handleServicioChange = (index: number, value: string) => {
    // Si el valor está vacío, establecer 0
    if (!value.trim()) {
      const saldosServiciosInicial = [...formApertura.saldosServiciosInicial];
      saldosServiciosInicial[index].monto = 0;
      setFormApertura({
        ...formApertura,
        saldosServiciosInicial
      });
      return;
    }
    
    // Eliminar cualquier carácter que no sea un dígito
    const soloNumeros = value.replace(/[^\d]/g, '');
    const valorNumerico = parseInt(soloNumeros) || 0;
    
    const saldosServiciosInicial = [...formApertura.saldosServiciosInicial];
    saldosServiciosInicial[index].monto = valorNumerico;
    
    setFormApertura({
      ...formApertura,
      saldosServiciosInicial
    });
  };

  const handleSelectChange = (event: SelectChangeEvent) => {
    const { name, value } = event.target;
    setFormApertura({
      ...formApertura,
      [name]: value
    });
  };

  const handleAbrirCaja = async () => {
    // Reiniciar el estado de error del maletín
    setMaletinError(false);
    
    if (!sucursalActual) {
      setErrorMessage('No hay una sucursal seleccionada');
      return;
    }
    
    if (!formApertura.maletinId) {
      setMaletinError(true);
      setErrorMessage('Debe seleccionar un maletín para abrir la caja');
      return;
    }
    
    // Verificar nuevamente que el maletín no esté en uso
    if (estaEnUso(formApertura.maletinId)) {
      setErrorMessage('El maletín seleccionado ya está en uso. Por favor, seleccione otro maletín disponible.');
      return;
    }

    try {
      setLoading(true);
      
      // Convertir el ID de sucursal de 'SUC001' a '1' para el backend
      let backendSucursalId = sucursalActual.id;
      if (sucursalActual.id.startsWith('SUC')) {
        // Extraer el número y convertirlo a string (SUC001 -> 1)
        const numericId = parseInt(sucursalActual.id.replace('SUC', ''), 10);
        backendSucursalId = numericId.toString();
      }
      
      const dataToSend = {
        ...formApertura,
        sucursalId: backendSucursalId
      };
      
      console.log('Datos a enviar para abrir caja:', dataToSend);

      const response = await axios.post('/api/cajas', dataToSend);
      setSuccessMessage('Caja abierta exitosamente');
      loadCajas(sucursalActual.id);
      setTabIndex(0); // Volver a la lista de cajas
      
      // Reiniciar el formulario a sus valores iniciales
      resetFormularioApertura();
    } catch (error: any) {
      console.error('Error al abrir caja:', error);
      
      // Capturar respuesta específica del servidor
      if (error.response && error.response.data) {
        if (error.response.data.codigo === 'MALETIN_EN_USO') {
          setErrorMessage('El maletín seleccionado ya está en uso por otra caja abierta. Seleccione otro maletín.');
          
          // Recargar la lista de cajas y maletines para actualizar el estado
          loadCajas(sucursalActual.id);
          loadMaletines(sucursalActual.id);
        } else if (error.response.data.error) {
          setErrorMessage(error.response.data.error);
        } else {
          setErrorMessage('Error al abrir la caja');
        }
      } else {
        setErrorMessage('Error al abrir la caja. Intente nuevamente.');
      }
    } finally {
      setLoading(false);
    }
  };

  // Verificar si un maletín está en uso
  const estaEnUso = (maletinId: string): boolean => {
    return maletinesEnUso.includes(maletinId);
  };
  
  // Obtener mensaje de estado para un maletín
  const getMensajeEstadoMaletin = (maletin: Maletin): string => {
    return estaEnUso(maletin.id) ? '(En uso)' : '(Disponible)';
  };

  // Añadir un nuevo estado para ver datos de apertura
  const [verDatosApertura, setVerDatosApertura] = useState(false);

  // Función para obtener el código formateado del maletín
  const obtenerCodigoMaletin = (maletinId: string): string => {
    // Buscar el maletín por ID para obtener su código
    const maletin = maletines.find(m => m.id === maletinId);
    if (maletin) {
      return maletin.codigo;
    }
    
    // Si no encontramos el maletín, intentar formatear el ID como un código de 4 dígitos
    // Asumiendo que maletinId puede ser un número o un string
    try {
      const numeroMaletin = parseInt(maletinId, 10);
      // Formatear con ceros a la izquierda para tener siempre 4 dígitos
      return numeroMaletin.toString().padStart(4, '0');
    } catch (e) {
      // Si no podemos convertirlo a número, devolver el ID original
      return maletinId;
    }
  };

  // Función para manejar la visualización de datos de apertura
  const handleVerApertura = (caja: Caja) => {
    setCajaSeleccionada(caja);
    setVerDatosApertura(true);
    setTabIndex(4); // Un nuevo índice para la vista de apertura
  };

  // Añadir nuevos estados para edición de apertura
  const [aperturaEditable, setAperturaEditable] = useState(false);
  const [formEdicionApertura, setFormEdicionApertura] = useState<any>(null);
  const [guardandoApertura, setGuardandoApertura] = useState(false);

  // Función para iniciar la edición de datos de apertura
  const iniciarEdicionApertura = () => {
    if (cajaSeleccionada) {
      // Clonar los datos de la caja seleccionada para no modificar el original
      setFormEdicionApertura({
        maletinId: cajaSeleccionada.maletinId,
        saldoInicial: JSON.parse(JSON.stringify(cajaSeleccionada.saldoInicial)),
        saldosServiciosInicial: JSON.parse(JSON.stringify(cajaSeleccionada.saldosServiciosInicial))
      });
      setAperturaEditable(true);
    }
  };

  // Función para cancelar la edición
  const cancelarEdicionApertura = () => {
    setAperturaEditable(false);
    setFormEdicionApertura(null);
  };

  // Funciones para manejar cambios en la edición con soporte para navegación con Enter
  const handleDenominacionAperturaChange = (index: number, valor: number) => {
    if (!formEdicionApertura) return;
    
    const denominaciones = [...formEdicionApertura.saldoInicial.denominaciones];
    denominaciones[index].cantidad = valor;
    
    // Recalcular totales
    const totales = {
      PYG: calcularTotalDenominaciones(denominaciones, 'PYG'),
      BRL: calcularTotalDenominaciones(denominaciones, 'BRL'),
      USD: calcularTotalDenominaciones(denominaciones, 'USD')
    };

    setFormEdicionApertura({
      ...formEdicionApertura,
      saldoInicial: {
        denominaciones,
        total: totales
      }
    });
  };

  const handleServicioAperturaChange = (index: number, value: string) => {
    if (!formEdicionApertura) return;
    
    // Si el valor está vacío, establecer 0
    if (!value.trim()) {
      const saldosServiciosInicial = [...formEdicionApertura.saldosServiciosInicial];
      saldosServiciosInicial[index].monto = 0;
      setFormEdicionApertura({
        ...formEdicionApertura,
        saldosServiciosInicial
      });
      return;
    }
    
    // Eliminar cualquier carácter que no sea un dígito
    const soloNumeros = value.replace(/[^\d]/g, '');
    const valorNumerico = parseInt(soloNumeros) || 0;
    
    const saldosServiciosInicial = [...formEdicionApertura.saldosServiciosInicial];
    saldosServiciosInicial[index].monto = valorNumerico;
    
    setFormEdicionApertura({
      ...formEdicionApertura,
      saldosServiciosInicial
    });
  };

  // Función para guardar los cambios
  const guardarCambiosApertura = async () => {
    if (!cajaSeleccionada || !formEdicionApertura) return;
    
    try {
      setGuardandoApertura(true);
      
      // Convertir el ID de sucursal
      let backendSucursalId = sucursalActual?.id || '';
      if (backendSucursalId.startsWith('SUC')) {
        const numericId = parseInt(backendSucursalId.replace('SUC', ''), 10);
        backendSucursalId = numericId.toString();
      }
      
      const datosActualizados = {
        cajaId: cajaSeleccionada.id,
        saldoInicial: formEdicionApertura.saldoInicial,
        saldosServiciosInicial: formEdicionApertura.saldosServiciosInicial
      };
      
      console.log('Guardando cambios de apertura:', datosActualizados);
      
      // En un sistema real esto sería un endpoint API
      // await axios.put(`/api/cajas/${cajaSeleccionada.id}/apertura`, datosActualizados);
      
      // Simulamos la actualización localmente
      const cajasActualizadas = cajas.map(caja => {
        if (caja.id === cajaSeleccionada.id) {
          return {
            ...caja,
            saldoInicial: formEdicionApertura.saldoInicial,
            saldosServiciosInicial: formEdicionApertura.saldosServiciosInicial
          };
        }
        return caja;
      });
      
      setCajas(cajasActualizadas);
      setCajaSeleccionada({
        ...cajaSeleccionada,
        saldoInicial: formEdicionApertura.saldoInicial,
        saldosServiciosInicial: formEdicionApertura.saldosServiciosInicial
      });
      
      setSuccessMessage('Datos de apertura actualizados correctamente');
      setAperturaEditable(false);
      setFormEdicionApertura(null);
    } catch (error) {
      console.error('Error al guardar cambios de apertura:', error);
      setErrorMessage('Error al guardar los cambios');
    } finally {
      setGuardandoApertura(false);
    }
  };

  // Función para verificar si el usuario tiene permiso para editar
  const tienePermisoEdicion = () => {
    // Aquí verificarías el rol del usuario o sus permisos
    // Por ahora retornamos true para simular que tiene permisos
    return true;
  };

  // Estados para el formulario de cierre
  const [formCierre, setFormCierre] = useState<any>(null);
  const [cerrandoCaja, setCerrandoCaja] = useState(false);

  // Función para inicializar el formulario de cierre
  const inicializarFormularioCierre = (caja: Caja) => {
    // Crear una copia profunda de la caja seleccionada para no modificar el original
    const saldoInicial = JSON.parse(JSON.stringify(caja.saldoInicial));
    const saldosServiciosInicial = JSON.parse(JSON.stringify(caja.saldosServiciosInicial));
    
    // Si ya existe un saldo final, usarlo como base
    let saldoFinal;
    if (caja.saldoFinal) {
      saldoFinal = JSON.parse(JSON.stringify(caja.saldoFinal));
      
      // Verificar que tenga todas las denominaciones necesarias
      const denominacionesNecesarias = [
        ...denominacionesGuaranies.map(d => ({...d, cantidad: 0})),
        ...denominacionesReales.map(d => ({...d, cantidad: 0})),
        ...denominacionesDolares.map(d => ({...d, cantidad: 0}))
      ];
      
      // Crear un mapa de las denominaciones existentes
      const denominacionesExistentes = new Map();
      saldoFinal.denominaciones.forEach((d: Denominacion) => {
        denominacionesExistentes.set(`${d.moneda}-${d.valor}`, d);
      });
      
      // Asegurarse de que todas las denominaciones necesarias estén presentes
      const todasLasDenominaciones = denominacionesNecesarias.map(d => {
        const key = `${d.moneda}-${d.valor}`;
        return denominacionesExistentes.has(key) ? denominacionesExistentes.get(key) : d;
      });
      
      saldoFinal.denominaciones = todasLasDenominaciones;
    } else {
      // Si no existe, inicializar con ceros
      saldoFinal = {
        denominaciones: [
          ...denominacionesGuaranies.map(d => ({...d, cantidad: 0})),
          ...denominacionesReales.map(d => ({...d, cantidad: 0})),
          ...denominacionesDolares.map(d => ({...d, cantidad: 0}))
        ],
        total: {
          PYG: 0,
          BRL: 0,
          USD: 0
        }
      };
    }
    
    // Si ya existen saldos de servicios finales, usarlos, de lo contrario inicializar con ceros
    const saldosServiciosFinal = caja.saldosServiciosFinal 
      ? JSON.parse(JSON.stringify(caja.saldosServiciosFinal))
      : saldosServiciosInicial.map((s: SaldoServicio) => ({
          ...s,
          monto: 0
        }));
    
    // Ordenar las denominaciones de mayor a menor para asegurar que se muestren en el mismo orden que en apertura
    saldoFinal.denominaciones.sort((a: Denominacion, b: Denominacion) => {
      if (a.moneda === b.moneda) {
        return b.valor - a.valor; // De mayor a menor valor
      }
      // Guaraníes, luego Reales, luego Dólares
      const monedaOrden: Record<string, number> = { 'PYG': 1, 'BRL': 2, 'USD': 3 };
      return monedaOrden[a.moneda] - monedaOrden[b.moneda];
    });
    
    return {
      cajaId: caja.id,
      saldoFinal,
      saldosServiciosFinal
    };
  };

  // Función para iniciar el cierre de caja (mantener para compatibilidad)
  const handleIniciarCierre = (caja: Caja) => {
    handleCerrarCaja(caja);
  };

  // Funciones para manejar cambios en el cierre
  const handleDenominacionCierreChange = (index: number, valor: number) => {
    if (!formCierre) return;
    
    const denominaciones = [...formCierre.saldoFinal.denominaciones];
    denominaciones[index].cantidad = valor;
    
    // Recalcular totales
    const totales = {
      PYG: calcularTotalDenominaciones(denominaciones, 'PYG'),
      BRL: calcularTotalDenominaciones(denominaciones, 'BRL'),
      USD: calcularTotalDenominaciones(denominaciones, 'USD')
    };

    setFormCierre({
      ...formCierre,
      saldoFinal: {
        denominaciones,
        total: totales
      }
    });
  };

  const handleServicioCierreChange = (index: number, value: string) => {
    if (!formCierre) return;
    
    // Si el valor está vacío, establecer 0
    if (!value.trim()) {
      const saldosServiciosFinal = [...formCierre.saldosServiciosFinal];
      saldosServiciosFinal[index].monto = 0;
      setFormCierre({
        ...formCierre,
        saldosServiciosFinal
      });
      return;
    }
    
    // Eliminar cualquier carácter que no sea un dígito
    const soloNumeros = value.replace(/[^\d]/g, '');
    const valorNumerico = parseInt(soloNumeros) || 0;
    
    const saldosServiciosFinal = [...formCierre.saldosServiciosFinal];
    saldosServiciosFinal[index].monto = valorNumerico;
    
    setFormCierre({
      ...formCierre,
      saldosServiciosFinal
    });
  };

  // Función para confirmar el cierre de caja
  const handleConfirmarCierre = async () => {
    if (!cajaSeleccionada || !formCierre) return;
    
    try {
      setCerrandoCaja(true);
      
      // Convertir el ID de sucursal
      let backendSucursalId = sucursalActual?.id || '';
      if (backendSucursalId.startsWith('SUC')) {
        const numericId = parseInt(backendSucursalId.replace('SUC', ''), 10);
        backendSucursalId = numericId.toString();
      }
      
      const datosCierre = {
        cajaId: cajaSeleccionada.id,
        saldoFinal: formCierre.saldoFinal,
        saldosServiciosFinal: formCierre.saldosServiciosFinal
      };
      
      console.log('Cerrando caja:', datosCierre);
      
      // Realizar la llamada a la API para cerrar la caja
      await axios.put(`/api/cajas/${cajaSeleccionada.id}/cerrar`, datosCierre);
      
      // Recargar las cajas desde el servidor para asegurar que tenemos los datos actualizados
      await loadCajas(sucursalActual?.id || '');
      
      setSuccessMessage('Caja cerrada correctamente');
      setTabIndex(0); // Volver a la lista de cajas
      setCajaSeleccionada(null);
      setFormCierre(null);
    } catch (error) {
      console.error('Error al cerrar caja:', error);
      setErrorMessage('Error al cerrar la caja');
    } finally {
      setCerrandoCaja(false);
    }
  };

  // Función para formatear el ID de la caja como un número más amigable
  const formatearIdCaja = (cajaId: string): string => {
    // Si el ID es numérico, formatéalo como un número de 6 dígitos con ceros a la izquierda
    if (/^\d+$/.test(cajaId)) {
      return `CAJA-${cajaId.padStart(6, '0')}`;
    }
    
    // Si el ID contiene algún patrón reconocible (ejemplo: UUID), obtener solo parte
    if (cajaId.includes('-')) {
      const partes = cajaId.split('-');
      // Usar la primera parte o la última, dependiendo del formato
      const parteSig = partes[partes.length - 1] || partes[0];
      return `CAJA-${parteSig.slice(0, 6).toUpperCase()}`;
    }
    
    // En otro caso, usar los primeros 6 caracteres del ID
    return `CAJA-${cajaId.slice(0, 6).toUpperCase()}`;
  };

  // Añadir nuevo estado para ver datos de cierre
  const [verDatosCierre, setVerDatosCierre] = useState(false);
  const [cierreEditable, setCierreEditable] = useState(false);
  const [formEdicionCierre, setFormEdicionCierre] = useState<any>(null);
  const [guardandoCierre, setGuardandoCierre] = useState(false);

  // Función para iniciar la edición de datos de cierre
  const iniciarEdicionCierre = () => {
    if (cajaSeleccionada && cajaSeleccionada.saldoFinal) {
      // Clonar los datos de la caja seleccionada para no modificar el original
      const saldoFinal = JSON.parse(JSON.stringify(cajaSeleccionada.saldoFinal));
      const saldosServiciosFinal = JSON.parse(JSON.stringify(cajaSeleccionada.saldosServiciosFinal || []));
      
      // Ordenar las denominaciones de mayor a menor
      saldoFinal.denominaciones.sort((a: Denominacion, b: Denominacion) => {
        if (a.moneda === b.moneda) {
          return b.valor - a.valor; // De mayor a menor valor
        }
        // Guaraníes, luego Reales, luego Dólares
        const monedaOrden: Record<string, number> = { 'PYG': 1, 'BRL': 2, 'USD': 3 };
        return monedaOrden[a.moneda] - monedaOrden[b.moneda];
      });
      
      setFormEdicionCierre({
        cajaId: cajaSeleccionada.id,
        saldoFinal,
        saldosServiciosFinal
      });
      setCierreEditable(true);
    }
  };

  // Función para cancelar la edición del cierre
  const cancelarEdicionCierre = () => {
    setCierreEditable(false);
    setFormEdicionCierre(null);
  };

  // Funciones para manejar cambios en la edición del cierre con soporte para navegación con Enter
  const handleDenominacionCierreEdicionChange = (index: number, valor: number) => {
    if (!formEdicionCierre) return;
    
    const denominaciones = [...formEdicionCierre.saldoFinal.denominaciones];
    denominaciones[index].cantidad = valor;
    
    // Recalcular totales
    const totales = {
      PYG: calcularTotalDenominaciones(denominaciones, 'PYG'),
      BRL: calcularTotalDenominaciones(denominaciones, 'BRL'),
      USD: calcularTotalDenominaciones(denominaciones, 'USD')
    };

    setFormEdicionCierre({
      ...formEdicionCierre,
      saldoFinal: {
        denominaciones,
        total: totales
      }
    });
  };

  const handleServicioCierreEdicionChange = (index: number, value: string) => {
    if (!formEdicionCierre) return;
    
    // Si el valor está vacío, establecer 0
    if (!value.trim()) {
      const saldosServiciosFinal = [...formEdicionCierre.saldosServiciosFinal];
      saldosServiciosFinal[index].monto = 0;
      setFormEdicionCierre({
        ...formEdicionCierre,
        saldosServiciosFinal
      });
      return;
    }
    
    // Eliminar cualquier carácter que no sea un dígito
    const soloNumeros = value.replace(/[^\d]/g, '');
    const valorNumerico = parseInt(soloNumeros) || 0;
    
    const saldosServiciosFinal = [...formEdicionCierre.saldosServiciosFinal];
    saldosServiciosFinal[index].monto = valorNumerico;
    
    setFormEdicionCierre({
      ...formEdicionCierre,
      saldosServiciosFinal
    });
  };

  // Función para guardar los cambios de cierre
  const guardarCambiosCierre = async () => {
    if (!cajaSeleccionada || !formEdicionCierre) return;
    
    try {
      setGuardandoCierre(true);
      
      const datosActualizados = {
        cajaId: cajaSeleccionada.id,
        saldoFinal: formEdicionCierre.saldoFinal,
        saldosServiciosFinal: formEdicionCierre.saldosServiciosFinal
      };
      
      console.log('Guardando cambios de cierre:', datosActualizados);
      
      // En un sistema real esto sería un endpoint API para actualizar los datos de cierre
      // await axios.put(`/api/cajas/${cajaSeleccionada.id}/actualizarCierre`, datosActualizados);
      
      // Simulamos la actualización localmente
      const cajasActualizadas = cajas.map(caja => {
        if (caja.id === cajaSeleccionada.id) {
          return {
            ...caja,
            saldoFinal: formEdicionCierre.saldoFinal,
            saldosServiciosFinal: formEdicionCierre.saldosServiciosFinal
          };
        }
        return caja;
      });
      
      setCajas(cajasActualizadas);
      setCajaSeleccionada({
        ...cajaSeleccionada,
        saldoFinal: formEdicionCierre.saldoFinal,
        saldosServiciosFinal: formEdicionCierre.saldosServiciosFinal
      });
      
      setSuccessMessage('Datos de cierre actualizados correctamente');
      setCierreEditable(false);
      setFormEdicionCierre(null);
    } catch (error) {
      console.error('Error al guardar cambios de cierre:', error);
      setErrorMessage('Error al guardar los cambios');
    } finally {
      setGuardandoCierre(false);
    }
  };

  // Agregar estado para el modal de movimientos
  const [movimientosDialogOpen, setMovimientosDialogOpen] = useState(false);
  // Agregar estado para los valores de los movimientos
  const [movimientosData, setMovimientosData] = useState({
    tigo: {
      miniCarga: 0,
      girosEnviados: 0,
      retiros: 0,
      cargaBilleteras: 0
    },
    personal: {
      maxiCarga: 0,
      girosEnviados: 0,
      retiros: 0,
      cargaBilleteras: 0
    },
    claro: {
      recargaClaro: 0,
      girosEnviados: 0,
      retiros: 0,
      cargaBilleteras: 0
    },
    aquiPago: {
      pagos: 0,
      retiros: 0
    },
    wepaGuaranies: {
      pagos: 0,
      retiros: 0
    },
    wepaDolares: {
      pagos: 0,
      retiros: 0
    }
  });
  
  // Función para abrir el modal de movimientos
  const handleVerMovimientos = (caja: Caja) => {
    setCajaSeleccionada(caja);
    // Aquí se podrían cargar los datos reales de la API
    setMovimientosDialogOpen(true);
  };
  
  // Función para manejar cambios en los campos de movimientos
  const handleMovimientoChange = (operadora: string, servicio: string, valor: string) => {
    const numericValue = valor === '' ? 0 : parseInt(valor.replace(/\D/g, ''), 10);
    
    setMovimientosData(prev => ({
      ...prev,
      [operadora]: {
        ...prev[operadora as keyof typeof prev],
        [servicio]: numericValue
      }
    }));
  };
  
  // Función para formatear valores en guaraníes
  const formatGuaranies = (value: number) => {
    return new Intl.NumberFormat('es-PY').format(value);
  };
  
  // Función para guardar los movimientos
  const handleGuardarMovimientos = () => {
    // Aquí se implementaría la lógica para guardar los datos en la API
    console.log('Guardando movimientos:', movimientosData);
    // Cerrar el diálogo después de guardar
    setMovimientosDialogOpen(false);
    // Mostrar un mensaje de éxito
    setSuccessMessage('Movimientos guardados correctamente');
  };

  // Agregar estado para los comprobantes
  const [comprobantes, setComprobantes] = useState<{[key: string]: string | null}>({
    tigo_miniCarga: null,
    tigo_girosEnviados: null,
    tigo_retiros: null,
    tigo_cargaBilleteras: null,
    personal_maxiCarga: null,
    personal_girosEnviados: null,
    personal_retiros: null,
    personal_cargaBilleteras: null,
    claro_recargaClaro: null,
    claro_girosEnviados: null,
    claro_retiros: null,
    claro_cargaBilleteras: null,
    aquiPago: null,
    wepaGuaranies: null,
    wepaDolares: null
  });

  // Función para manejar la subida de archivos
  const handleFileUpload = (operadora: string, servicio: string, e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      const file = e.target.files[0];
      let fileId: string;
      
      // Si no hay servicio, es un comprobante a nivel de operadora
      if (!servicio) {
        fileId = operadora;
      } else {
        fileId = `${operadora}_${servicio}`;
      }
      
      // Aquí podrías enviar el archivo a tu servidor/API
      // Por ahora solo simularemos creando una URL temporal
      const fileUrl = URL.createObjectURL(file);
      
      setComprobantes(prev => ({
        ...prev,
        [fileId]: fileUrl
      }));
      
      const mensaje = servicio 
        ? `Comprobante para ${servicio} en ${operadora} subido correctamente`
        : `Comprobante para ${operadora} subido correctamente`;
      
      setSuccessMessage(mensaje);
    }
  };

  // Función para ver el comprobante
  const handleVerComprobante = (operadora: string, servicio: string) => {
    const fileId = servicio ? `${operadora}_${servicio}` : operadora;
    const fileUrl = comprobantes[fileId];
    
    if (fileUrl) {
      // Abrir en una nueva ventana
      window.open(fileUrl, '_blank');
    } else {
      const mensaje = servicio 
        ? `No hay comprobante disponible para ${servicio} en ${operadora}`
        : `No hay comprobante disponible para ${operadora}`;
      
      setErrorMessage(mensaje);
    }
  };

  // Generar IDs secuenciales para campos de movimientos
  const getMovimientoFieldId = (operadora: string, servicio: string): string => 
    `movimiento-${operadora}-${servicio.replace(/\s+/g, '-').toLowerCase()}`;

  // Función para obtener el siguiente ID de campo
  const getNextMovimientoFieldId = (operadora: string, servicio: string): string => {
    // Mapeo de operadoras y servicios en orden secuencial
    const camposOrdenados = [
      { operadora: 'tigo', servicio: 'miniCarga' },
      { operadora: 'tigo', servicio: 'girosEnviados' },
      { operadora: 'tigo', servicio: 'retiros' },
      { operadora: 'tigo', servicio: 'cargaBilleteras' },
      { operadora: 'personal', servicio: 'maxiCarga' },
      { operadora: 'personal', servicio: 'girosEnviados' },
      { operadora: 'personal', servicio: 'retiros' },
      { operadora: 'personal', servicio: 'cargaBilleteras' },
      { operadora: 'claro', servicio: 'recargaClaro' },
      { operadora: 'claro', servicio: 'girosEnviados' },
      { operadora: 'claro', servicio: 'retiros' },
      { operadora: 'claro', servicio: 'cargaBilleteras' },
      { operadora: 'aquiPago', servicio: 'pagos' },
      { operadora: 'aquiPago', servicio: 'retiros' },
      { operadora: 'wepaGuaranies', servicio: 'pagos' },
      { operadora: 'wepaGuaranies', servicio: 'retiros' },
      { operadora: 'wepaDolares', servicio: 'pagos' },
      { operadora: 'wepaDolares', servicio: 'retiros' }
    ];

    // Encontrar la posición actual
    const posicionActual = camposOrdenados.findIndex(
      campo => campo.operadora === operadora && campo.servicio === servicio
    );

    // Si es el último campo, volver al primero, sino ir al siguiente
    if (posicionActual === -1 || posicionActual === camposOrdenados.length - 1) {
      return getMovimientoFieldId(camposOrdenados[0].operadora, camposOrdenados[0].servicio);
    } else {
      const siguiente = camposOrdenados[posicionActual + 1];
      return getMovimientoFieldId(siguiente.operadora, siguiente.servicio);
    }
  };

  // Cargar datos iniciales
  useEffect(() => {
    // ... existing code ...
    
    // Cargar datos de cuentas bancarias y POS (simulados)
    setCuentasBancarias([
      { id: 'CTA001', banco: 'Banco Itaú', numeroCuenta: '123456789', moneda: 'PYG' },
      { id: 'CTA002', banco: 'Banco Continental', numeroCuenta: '987654321', moneda: 'USD' },
      { id: 'CTA003', banco: 'Banco GNB', numeroCuenta: '456789123', moneda: 'BRL' }
    ]);
    
    setDispositivosPos([
      { id: 'POS001', nombre: 'POS Principal Itaú', codigoBarras: '1234567890123' },
      { id: 'POS002', nombre: 'POS Continental Sucursal', codigoBarras: '3216549870321' }
    ]);
    
  }, []);
  
  // ... existing code ...
  
  // Función para abrir el diálogo de operaciones bancarias
  const handleVerOperacionesBancarias = (caja: Caja) => {
    setCajaSeleccionada(caja);
    // Cargar operaciones bancarias (simulado por ahora)
    // En un caso real, estas operaciones vendrían de la API
    setOperacionesBancarias([
      {
        id: 'OP001',
        tipo: 'pos',
        codigoBarrasPos: '1234567890123',
        posDescripcion: 'POS Principal Itaú',
        numeroComprobante: '78945',
        monto: 150000,
        montoACobrar: 159000,
        tipoServicio: 'Tigo Mini Carga',
        fecha: '2023-10-15 09:30'
      },
      {
        id: 'OP002',
        tipo: 'transferencia',
        cuentaBancariaId: 'CTA001',
        cuentaBancaria: 'Banco Itaú - 123456789 (PYG)',
        monto: 300000,
        tipoServicio: 'Personal Maxi Carga',
        fecha: '2023-10-15 10:45'
      }
    ]);
    setOperacionesBancariasDialogOpen(true);
  };
  
  // Función para abrir el formulario de nueva operación
  const handleNuevaOperacion = () => {
    setFormOperacion({
      tipo: 'pos',
      monto: 0,
      montoACobrar: 0,
      tipoServicio: '',
      archivoAdjunto: null,
      codigoBarrasPos: '',
      posDescripcion: '',
      numeroComprobante: ''
    });
    setFormOperacionDialogOpen(true);
  };
  
  // Función para editar una operación bancaria existente
  const handleEditarOperacion = (operacion: OperacionBancaria) => {
    setFormOperacion(operacion);
    setFormOperacionDialogOpen(true);
  };
  
  // Estado para controlar el diálogo de confirmación para eliminar operaciones
  const [confirmarEliminarOperacionId, setConfirmarEliminarOperacionId] = useState<string | null>(null);

  // Función para eliminar una operación bancaria
  const handleEliminarOperacion = (id: string) => {
    setConfirmarEliminarOperacionId(id);
  };
  
  // Función para confirmar la eliminación de una operación
  const confirmarEliminacion = () => {
    if (confirmarEliminarOperacionId) {
      setOperacionesBancarias(prev => prev.filter(op => op.id !== confirmarEliminarOperacionId));
      setSuccessMessage('Operación bancaria eliminada correctamente');
      
      // Limpiar el mensaje después de 3 segundos
      setTimeout(() => {
        setSuccessMessage(null);
      }, 3000);
      
      // Cerrar el diálogo de confirmación
      setConfirmarEliminarOperacionId(null);
    }
  };
  
  // Función para cancelar la eliminación
  const cancelarEliminacion = () => {
    setConfirmarEliminarOperacionId(null);
  };
  
  // Función para cerrar el diálogo de operaciones bancarias
  const handleCloseOperacionesBancarias = () => {
    setOperacionesBancariasDialogOpen(false);
  };
  
  // Función para cerrar el formulario de operaciones
  const handleCloseFormOperacion = () => {
    setFormOperacionDialogOpen(false);
  };
  
  // Función para formatear números con separadores de miles
  const formatearMontoConSeparadores = (monto: number): string => {
    return new Intl.NumberFormat('es-PY').format(monto);
  };
  
  // Función para convertir texto formateado a número
  const textoFormateadoANumero = (texto: string): number => {
    if (!texto) return 0;
    // Eliminar todos los separadores y convertir a número
    return parseFloat(texto.replace(/\./g, '').replace(',', '.')) || 0;
  };
  
  // Función para seleccionar un servicio y cerrar el dropdown
  const seleccionarServicio = (servicio: string, event?: React.MouseEvent<HTMLLIElement>) => {
    if (event) event.stopPropagation();
    setFormOperacion(prev => ({...prev, tipoServicio: servicio}));
    
    // Cerrar el dropdown
    setTimeout(() => {
      // Disparar un evento click fuera del dropdown para cerrarlo
      const clickEvent = new MouseEvent('click', {
        bubbles: true,
        cancelable: true,
        view: window
      });
      document.body.dispatchEvent(clickEvent);
    }, 100);
  };

  // Función para obtener descripción del POS basado en el código de barras
  const obtenerDescripcionPos = (codigoBarras: string): string => {
    if (!codigoBarras) return '';
    
    // Si el código es los últimos 4 dígitos, buscar POS que coincida
    if (codigoBarras.length === 4) {
      const posEncontrado = dispositivosPos.find(pos => 
        pos.codigoBarras.endsWith(codigoBarras)
      );
      if (posEncontrado) return posEncontrado.nombre;
      return '';
    }
    
    // Si es código completo, buscar POS exacto
    const posEncontrado = dispositivosPos.find(pos => 
      pos.codigoBarras === codigoBarras
    );
    return posEncontrado ? posEncontrado.nombre : '';
  };

  // Función para manejar cambios en el formulario de operaciones bancarias
  const handleOperacionFormChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    
    if (name === 'monto') {
      // Convertir el texto formateado a número
      const monto = textoFormateadoANumero(value);
      
      // Si es POS, calculamos automáticamente el monto a cobrar (monto + 6%)
      const montoACobrar = formOperacion.tipo === 'pos' ? monto * 1.06 : 0;
      
      setFormOperacion(prev => ({
        ...prev,
        [name]: monto,
        montoACobrar
      }));
    } else if (name === 'codigoBarrasPos') {
      // Al cambiar el código de barras, actualizamos también la descripción
      const descripcion = obtenerDescripcionPos(value);
      
      setFormOperacion(prev => ({
        ...prev,
        [name]: value,
        posDescripcion: descripcion
      }));
    } else {
      setFormOperacion(prev => ({
        ...prev,
        [name]: value
      }));
    }
  };
  
  // Función para manejar cambios en selects
  const handleOperacionSelectChange = (e: SelectChangeEvent) => {
    const { name, value } = e.target;
    
    if (name === 'tipo') {
      // Si cambia el tipo, reiniciamos campos específicos
      const newType = value as 'pos' | 'transferencia';
      let newState: Partial<OperacionBancaria> = { 
        tipo: newType,
        cuentaBancariaId: undefined
      };
      
      if (newType === 'pos') {
        // Si es POS, mantenemos/inicializamos campos de POS
        newState.montoACobrar = (formOperacion.monto || 0) * 1.06;
        newState.codigoBarrasPos = formOperacion.codigoBarrasPos || '';
        newState.posDescripcion = formOperacion.posDescripcion || '';
        newState.numeroComprobante = formOperacion.numeroComprobante || '';
      } else {
        // Si es transferencia, limpiamos campos de POS
        newState.montoACobrar = undefined;
        newState.codigoBarrasPos = undefined;
        newState.posDescripcion = undefined;
        newState.numeroComprobante = undefined;
      }
      
      setFormOperacion(prev => ({
        ...prev,
        ...newState
      }));
    } else {
      setFormOperacion(prev => ({
        ...prev,
        [name]: value
      }));
    }
  };
  
  // Función para manejar la carga de archivos
  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files.length > 0) {
      const file = e.target.files[0];
      setFormOperacion(prev => ({
        ...prev,
        archivoAdjunto: file,
        nombreArchivo: file.name
      }));
    }
  };
  
  // Función para guardar la operación bancaria
  const handleGuardarOperacion = () => {
    // Verificar si estamos editando una operación existente
    const esEdicion = formOperacion.id !== undefined;
    
    // Preparar la operación para guardar
    const operacionActualizada: OperacionBancaria = {
      ...formOperacion,
      // Si es una nueva operación, generar un ID, sino mantener el existente
      id: esEdicion ? formOperacion.id : `OP${Math.floor(Math.random() * 1000).toString().padStart(3, '0')}`,
      fecha: esEdicion ? formOperacion.fecha : new Date().toLocaleString('es-PY'),
      cuentaBancaria: formOperacion.cuentaBancariaId 
        ? cuentasBancarias.find(c => c.id === formOperacion.cuentaBancariaId)
            ? `${cuentasBancarias.find(c => c.id === formOperacion.cuentaBancariaId)?.banco} - ${cuentasBancarias.find(c => c.id === formOperacion.cuentaBancariaId)?.numeroCuenta} (${cuentasBancarias.find(c => c.id === formOperacion.cuentaBancariaId)?.moneda})`
            : undefined
        : undefined
    };
    
    if (esEdicion) {
      // Actualizar la operación existente
      setOperacionesBancarias(prev => 
        prev.map(op => op.id === operacionActualizada.id ? operacionActualizada : op)
      );
      setSuccessMessage('Operación bancaria actualizada correctamente');
    } else {
      // Agregar la nueva operación a la lista
      setOperacionesBancarias(prev => [...prev, operacionActualizada]);
      setSuccessMessage('Operación bancaria registrada correctamente');
    }
    
    // Cerrar el diálogo del formulario
    setFormOperacionDialogOpen(false);
    
    // Limpiar el mensaje después de 3 segundos
    setTimeout(() => {
      setSuccessMessage(null);
    }, 3000);
  };
  
  // ... existing code ...
  
  // En la sección de acciones de la tabla, modificar para añadir el icono de operaciones bancarias
  // Encuentra:
  // <IconButton 
  //   size="small" 
  //   color="primary" 
  //   onClick={() => handleVerMovimientos(caja)}
  //   sx={{ marginRight: 1 }}
  // >
  //   <AssignmentIcon fontSize="small" />
  // </IconButton>
  
  // Y añade después:
  // <Tooltip title="Operaciones bancarias">
  //   <IconButton 
  //     size="small" 
  //     color="primary" 
  //     onClick={() => handleVerOperacionesBancarias(caja)}
  //     sx={{ marginRight: 1 }}
  //   >
  //     <AccountBalanceIcon fontSize="small" />
  //   </IconButton>
  // </Tooltip>
  
  // ... existing code ...
  
  // Después de los diálogos existentes, añadir el diálogo de operaciones bancarias:
  
  // Diálogo para operaciones bancarias
  return (
    <Container maxWidth="lg">
      <Box sx={{ mb: 4 }}>
        <Typography variant="h4" component="h1" gutterBottom>
          Administración de Cajas
        </Typography>
        <Typography variant="subtitle1" color="textSecondary">
          {sucursalActual 
            ? `Sucursal: ${sucursalActual.nombre}`
            : 'No hay sucursal seleccionada'}
        </Typography>
      </Box>

      <Paper sx={{ width: '100%', mb: 4 }}>
        <Tabs value={tabIndex} onChange={handleTabChange}>
          <Tab label="CAJAS ACTIVAS" />
        </Tabs>

        {/* Lista de Cajas */}
        {tabIndex === 0 && (
          <Box sx={{ p: 3 }}>
            <Box sx={{ display: 'flex', justifyContent: 'flex-end', mb: 2 }}>
              <Button 
                variant="contained" 
                startIcon={<AddIcon />}
                onClick={handleNuevaCaja}
              >
                ABRIR NUEVA CAJA
              </Button>
            </Box>

            {loading ? (
              <Box sx={{ display: 'flex', justifyContent: 'center', py: 3 }}>
                <CircularProgress />
              </Box>
            ) : cajas.length === 0 ? (
              <Typography align="center" variant="subtitle1" sx={{ py: 3 }}>
                No hay cajas abiertas en esta sucursal
              </Typography>
            ) : (
              <TableContainer>
                <Table size="small">
                  <TableHead sx={{ backgroundColor: '#1976d2' }}>
                    <TableRow>
                      <TableCell sx={{ color: 'white' }}>ID</TableCell>
                      <TableCell sx={{ color: 'white' }}>USUARIO</TableCell>
                      <TableCell sx={{ color: 'white' }}>ESTADO</TableCell>
                      <TableCell sx={{ color: 'white' }}>APERTURA</TableCell>
                      <TableCell sx={{ color: 'white' }}>CIERRE</TableCell>
                      <TableCell sx={{ color: 'white' }} align="center">ACCIONES</TableCell>
                    </TableRow>
                  </TableHead>
                  <TableBody>
                    {cajas.map(caja => (
                      <TableRow key={caja.id}>
                        <TableCell>{formatearIdCaja(caja.id)}</TableCell>
                        <TableCell>{caja.usuario}</TableCell>
                        <TableCell>
                          <Box sx={{
                            backgroundColor: caja.estado === 'abierta' ? 'green' : 'gray',
                            color: 'white',
                            padding: '2px 8px',
                            borderRadius: '4px',
                            display: 'inline-block'
                          }}>
                            {caja.estado === 'abierta' ? 'ABIERTA' : 'CERRADA'}
                          </Box>
                        </TableCell>
                        <TableCell>
                          {format(new Date(caja.fechaApertura), 'dd/MM/yyyy HH:mm', { locale: es })}
                        </TableCell>
                        <TableCell>
                          {caja.fechaCierre 
                            ? format(new Date(caja.fechaCierre), 'dd/MM/yyyy HH:mm', { locale: es })
                            : '-'}
                        </TableCell>
                        <TableCell align="center">
                          <Tooltip title="Ver detalles">
                            <IconButton 
                              size="small" 
                              color="primary" 
                              onClick={() => handleVerDetalle(caja)}
                              sx={{ marginRight: 1 }}
                            >
                              <VisibilityIcon fontSize="small" />
                            </IconButton>
                          </Tooltip>

                          <Tooltip title="Ver datos de apertura">
                            <IconButton 
                              size="small" 
                              color="info" 
                              onClick={() => handleVerApertura(caja)}
                              sx={{ marginRight: 1 }}
                            >
                              <MonetizationOnIcon fontSize="small" />
                            </IconButton>
                          </Tooltip>
                          
                          <Tooltip title="Operaciones bancarias">
                            <IconButton 
                              size="small" 
                              color="success"
                              onClick={() => handleVerOperacionesBancarias(caja)}
                              sx={{ marginRight: 1 }}
                            >
                              <AccountBalanceIcon fontSize="small" />
                            </IconButton>
                          </Tooltip>
                          
                          <Tooltip title="Ver movimientos">
                            <IconButton 
                              size="small" 
                              color="secondary"
                              onClick={() => handleVerMovimientos(caja)}
                              sx={{ marginRight: 1 }}
                            >
                              <AssignmentIcon fontSize="small" />
                            </IconButton>
                          </Tooltip>
                          
                          <Tooltip title="Retiros">
                            <IconButton 
                              size="small" 
                              color="warning"
                              onClick={() => handleRetiros(caja)}
                              sx={{ marginRight: 1 }}
                              disabled={caja.estado !== 'abierta'}
                            >
                              <AtmIcon fontSize="small" />
                            </IconButton>
                          </Tooltip>
                          <Tooltip title="Pagos">
                            <IconButton
                              size="small"
                              color="primary"
                              onClick={() => handlePagos(caja)}
                              sx={{ marginRight: 1 }}
                            >
                              <PaymentsIcon fontSize="small" />
                            </IconButton>
                          </Tooltip>
                          
                          <Tooltip title={caja.estado === 'abierta' ? "Cerrar caja" : "Ver datos de cierre"}>
                            <IconButton 
                              size="small" 
                              color="error" 
                              onClick={() => handleCerrarCaja(caja)}
                              sx={{ marginRight: 1 }}
                            >
                              <CloseIcon fontSize="small" />
                            </IconButton>
                          </Tooltip>
                          
                          <Tooltip title="Imprimir">
                            <IconButton 
                              size="small" 
                              color="inherit"
                              onClick={() => {/* Función para imprimir */}}
                            >
                              <PrintIcon fontSize="small" />
                            </IconButton>
                          </Tooltip>
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </TableContainer>
            )}
          </Box>
        )}

        {/* Formulario de Apertura de Caja - Ahora será la pestaña 1 */}
        {tabIndex === 1 && (
          <Box sx={{ p: 3 }}>
            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>
              <Typography variant="h6" gutterBottom>
                Apertura de Caja
              </Typography>
              <Button 
                variant="outlined" 
                onClick={handleVolverAListado}
              >
                CANCELAR
              </Button>
            </Box>

            <Grid container spacing={3}>
              {/* Selección de Maletín */}
              <Grid item xs={12}>
                <FormControl 
                  fullWidth 
                  variant="outlined" 
                  size="small" 
                  error={maletinError}
                  required
                >
                  <InputLabel id="maletin-label">Maletín</InputLabel>
                  <Select
                    labelId="maletin-label"
                    id="maletinId"
                    name="maletinId"
                    value={formApertura.maletinId}
                    onChange={(e) => {
                      setMaletinError(false); // Limpiar el error cuando selecciona un maletín
                      handleSelectChange(e);
                    }}
                    label="Maletín"
                  >
                    <MenuItem value="">
                      <em>Seleccione un maletín</em>
                    </MenuItem>
                    {maletines.map((maletin) => (
                      <MenuItem 
                        key={maletin.id} 
                        value={maletin.id}
                        disabled={estaEnUso(maletin.id)}
                        sx={{ 
                          color: estaEnUso(maletin.id) ? 'text.disabled' : 'text.primary',
                        }}
                      >
                        {maletin.codigo} {getMensajeEstadoMaletin(maletin)}
                      </MenuItem>
                    ))}
                  </Select>
                  {maletinError && (
                    <FormHelperText>Debe seleccionar un maletín para continuar</FormHelperText>
                  )}
                </FormControl>
              </Grid>

              {/* Conteo de Guaraníes */}
              <Grid item xs={12} md={4}>
                <Typography variant="subtitle1" gutterBottom>
                  Conteo de Guaraníes
                </Typography>
                <TableContainer component={Paper} variant="outlined">
                  <Table size="small">
                    <TableHead>
                      <TableRow>
                        <TableCell>Denominación</TableCell>
                        <TableCell>Cantidad</TableCell>
                        <TableCell>Subtotal</TableCell>
                      </TableRow>
                    </TableHead>
                    <TableBody>
                      {formApertura.saldoInicial.denominaciones
                        .filter((d: Denominacion) => d.moneda === 'PYG')
                        .map((denom: Denominacion, index: number, arr: Denominacion[]) => {
                          const originalIndex = formApertura.saldoInicial.denominaciones.indexOf(denom);
                          const isLast = index === arr.length - 1;
                          
                          // Determinar el ID del siguiente campo
                          let nextFieldId: string = '';
                          if (isLast) {
                            // Si es el último Guaraní, ir al primer Real
                            const primerReal = formApertura.saldoInicial.denominaciones.find((d: Denominacion) => d.moneda === 'BRL');
                            nextFieldId = primerReal 
                              ? getDenominacionFieldId('BRL', primerReal.valor) 
                              : '';
                          } else {
                            // Ir al siguiente Guaraní
                            nextFieldId = getDenominacionFieldId('PYG', arr[index + 1].valor);
                          }
                          
                          const thisFieldId = getDenominacionFieldId('PYG', denom.valor);
                          
                          return (
                            <TableRow key={`PYG-${denom.valor}`}>
                              <TableCell>
                                {new Intl.NumberFormat('es-PY').format(denom.valor)} Gs
                              </TableCell>
                              <TableCell>
                                <TextField
                                  size="small"
                                  type="number"
                                  value={denom.cantidad}
                                  onChange={(e) => handleDenominacionChange(originalIndex, parseInt(e.target.value) || 0)}
                                  InputProps={{ 
                                    inputProps: { min: 0 },
                                    inputRef: (ref) => registerInputRef(thisFieldId, ref)
                                  }}
                                  onKeyDown={(e) => handleKeyDown(e, nextFieldId)}
                                  onClick={handleInputClick}
                                />
                              </TableCell>
                              <TableCell>
                                {new Intl.NumberFormat('es-PY').format(denom.valor * denom.cantidad)} Gs
                              </TableCell>
                            </TableRow>
                          );
                        })}
                      <TableRow>
                        <TableCell colSpan={2} align="right"><strong>Total Gs:</strong></TableCell>
                        <TableCell>
                          <strong>
                            {new Intl.NumberFormat('es-PY').format(formApertura.saldoInicial.total.PYG)} Gs
                          </strong>
                        </TableCell>
                      </TableRow>
                    </TableBody>
                  </Table>
                </TableContainer>
              </Grid>

              {/* Conteo de Reales */}
              <Grid item xs={12} md={4}>
                <Typography variant="subtitle1" gutterBottom>
                  Conteo de Reales
                </Typography>
                <TableContainer component={Paper} variant="outlined">
                  <Table size="small">
                    <TableHead>
                      <TableRow>
                        <TableCell>Denominación</TableCell>
                        <TableCell>Cantidad</TableCell>
                        <TableCell>Subtotal</TableCell>
                      </TableRow>
                    </TableHead>
                    <TableBody>
                      {formApertura.saldoInicial.denominaciones
                        .filter((d: Denominacion) => d.moneda === 'BRL')
                        .map((denom: Denominacion, index: number, arr: Denominacion[]) => {
                          const originalIndex = formApertura.saldoInicial.denominaciones.indexOf(denom);
                          const isLast = index === arr.length - 1;
                          
                          // Determinar el ID del siguiente campo
                          let nextFieldId: string = '';
                          if (isLast) {
                            // Si es el último Real, ir al primer Dólar
                            const primerDolar = formApertura.saldoInicial.denominaciones.find((d: Denominacion) => d.moneda === 'USD');
                            nextFieldId = primerDolar 
                              ? getDenominacionFieldId('USD', primerDolar.valor) 
                              : '';
                          } else {
                            // Ir al siguiente Real
                            nextFieldId = getDenominacionFieldId('BRL', arr[index + 1].valor);
                          }
                          
                          const thisFieldId = getDenominacionFieldId('BRL', denom.valor);
                          
                          return (
                            <TableRow key={`BRL-${denom.valor}`}>
                              <TableCell>
                                R$ {new Intl.NumberFormat('pt-BR', { minimumFractionDigits: 2, maximumFractionDigits: 2 }).format(denom.valor)}
                              </TableCell>
                              <TableCell>
                                <TextField
                                  size="small"
                                  type="number"
                                  value={denom.cantidad}
                                  onChange={(e) => handleDenominacionChange(originalIndex, parseInt(e.target.value) || 0)}
                                  InputProps={{ 
                                    inputProps: { min: 0 },
                                    inputRef: (ref) => registerInputRef(thisFieldId, ref)
                                  }}
                                  onKeyDown={(e) => handleKeyDown(e, nextFieldId)}
                                  onClick={handleInputClick}
                                />
                              </TableCell>
                              <TableCell>
                                R$ {new Intl.NumberFormat('pt-BR', { minimumFractionDigits: 2, maximumFractionDigits: 2 }).format(denom.valor * denom.cantidad)}
                              </TableCell>
                            </TableRow>
                          );
                        })}
                      <TableRow>
                        <TableCell colSpan={2} align="right"><strong>Total R$:</strong></TableCell>
                        <TableCell>
                          <strong>
                            R$ {new Intl.NumberFormat('pt-BR', { minimumFractionDigits: 2, maximumFractionDigits: 2 }).format(formApertura.saldoInicial.total.BRL)}
                          </strong>
                        </TableCell>
                      </TableRow>
                    </TableBody>
                  </Table>
                </TableContainer>
              </Grid>

              {/* Conteo de Dólares */}
              <Grid item xs={12} md={4}>
                <Typography variant="subtitle1" gutterBottom>
                  Conteo de Dólares
                </Typography>
                <TableContainer component={Paper} variant="outlined">
                  <Table size="small">
                    <TableHead>
                      <TableRow>
                        <TableCell>Denominación</TableCell>
                        <TableCell>Cantidad</TableCell>
                        <TableCell>Subtotal</TableCell>
                      </TableRow>
                    </TableHead>
                    <TableBody>
                      {formApertura.saldoInicial.denominaciones
                        .filter((d: Denominacion) => d.moneda === 'USD')
                        .map((denom: Denominacion, index: number, arr: Denominacion[]) => {
                          const originalIndex = formApertura.saldoInicial.denominaciones.indexOf(denom);
                          const isLast = index === arr.length - 1;
                          
                          // Determinar el ID del siguiente campo
                          let nextFieldId: string = '';
                          if (isLast) {
                            // Si es el último Dólar, ir al primer Servicio
                            const primerServicio = formApertura.saldosServiciosInicial[0];
                            nextFieldId = primerServicio 
                              ? getServicioFieldId(primerServicio.servicio) 
                              : '';
                          } else {
                            // Ir al siguiente Dólar
                            nextFieldId = getDenominacionFieldId('USD', arr[index + 1].valor);
                          }
                          
                          const thisFieldId = getDenominacionFieldId('USD', denom.valor);
                          
                          return (
                            <TableRow key={`USD-${denom.valor}`}>
                              <TableCell>
                                US$ {new Intl.NumberFormat('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }).format(denom.valor)}
                              </TableCell>
                              <TableCell>
                                <TextField
                                  size="small"
                                  type="number"
                                  value={denom.cantidad}
                                  onChange={(e) => handleDenominacionChange(originalIndex, parseInt(e.target.value) || 0)}
                                  InputProps={{ 
                                    inputProps: { min: 0 },
                                    inputRef: (ref) => registerInputRef(thisFieldId, ref)
                                  }}
                                  onKeyDown={(e) => handleKeyDown(e, nextFieldId)}
                                  onClick={handleInputClick}
                                />
                              </TableCell>
                              <TableCell>
                                US$ {new Intl.NumberFormat('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }).format(denom.valor * denom.cantidad)}
                              </TableCell>
                            </TableRow>
                          );
                        })}
                      <TableRow>
                        <TableCell colSpan={2} align="right"><strong>Total US$:</strong></TableCell>
                        <TableCell>
                          <strong>
                            US$ {new Intl.NumberFormat('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }).format(formApertura.saldoInicial.total.USD)}
                          </strong>
                        </TableCell>
                      </TableRow>
                    </TableBody>
                  </Table>
                </TableContainer>
              </Grid>

              {/* Saldos de Servicios */}
              <Grid item xs={12}>
                <Typography variant="subtitle1" gutterBottom>
                  Saldos Iniciales de Servicios
                </Typography>
                <TableContainer component={Paper} variant="outlined">
                  <Table size="small">
                    <TableHead>
                      <TableRow>
                        <TableCell>Servicio</TableCell>
                        <TableCell>Monto (Gs)</TableCell>
                      </TableRow>
                    </TableHead>
                    <TableBody>
                      {formApertura.saldosServiciosInicial.map((servicio: SaldoServicio, index: number, arr: SaldoServicio[]) => {
                        const isLast = index === arr.length - 1;
                        
                        // Determinar el ID del siguiente campo
                        let nextFieldId: string = '';
                        if (isLast) {
                          // Si es el último servicio, no hay siguiente campo
                          nextFieldId = '';
                        } else {
                          // Ir al siguiente servicio
                          nextFieldId = getServicioFieldId(arr[index + 1].servicio);
                        }
                        
                        const thisFieldId = getServicioFieldId(servicio.servicio);
                        
                        // Formatear el valor para mostrarlo con separadores de miles
                        const valorFormateado = new Intl.NumberFormat('es-PY').format(servicio.monto);
                        
                        return (
                          <TableRow key={servicio.servicio}>
                            <TableCell>{servicio.servicio}</TableCell>
                            <TableCell>
                              <TextField
                                size="small"
                                value={valorFormateado}
                                onChange={(e) => handleServicioChange(index, e.target.value)}
                                InputProps={{ 
                                  inputProps: { min: 0 },
                                  inputRef: (ref) => registerInputRef(thisFieldId, ref)
                                }}
                                onKeyDown={(e) => isLast ? undefined : handleKeyDown(e, nextFieldId)}
                                onClick={handleInputClick}
                              />
                            </TableCell>
                          </TableRow>
                        );
                      })}
                    </TableBody>
                  </Table>
                </TableContainer>
              </Grid>

              {/* Botones de acción */}
              <Grid item xs={12}>
                <Box sx={{ display: 'flex', justifyContent: 'flex-end', gap: 2, mt: 2 }}>
                  <Button 
                    variant="outlined" 
                    onClick={handleVolverAListado}
                  >
                    CANCELAR
                  </Button>
                  <Button 
                    variant="contained" 
                    color="primary" 
                    onClick={handleAbrirCaja}
                    disabled={loading}
                  >
                    {loading ? <CircularProgress size={24} /> : 'ABRIR CAJA'}
                  </Button>
                </Box>
              </Grid>
            </Grid>
          </Box>
        )}

        {/* Vista de Detalle de Caja */}
        {tabIndex === 2 && cajaSeleccionada && (
          <Box sx={{ p: 3 }}>
            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>
              <Typography variant="h6" gutterBottom>
                Detalle de Caja {formatearIdCaja(cajaSeleccionada.id)}
              </Typography>
              <Button 
                variant="outlined" 
                onClick={handleVolverAListado}
              >
                VOLVER
              </Button>
            </Box>
            
            <Grid container spacing={3}>
              <Grid item xs={12} md={6}>
                <Paper elevation={3} sx={{ p: 2, mb: 2 }}>
                  <Typography variant="h6" gutterBottom>
                    Información General
                  </Typography>
                  <Typography variant="subtitle1">
                    <strong>ID:</strong> {formatearIdCaja(cajaSeleccionada.id)}
                  </Typography>
                  <Typography variant="subtitle1">
                    <strong>Usuario:</strong> {cajaSeleccionada.usuario}
                  </Typography>
                  <Typography variant="subtitle1">
                    <strong>Estado:</strong> {cajaSeleccionada.estado === 'abierta' ? 'ABIERTA' : 'CERRADA'}
                  </Typography>
                  <Typography variant="subtitle1">
                    <strong>Fecha de Apertura:</strong> {format(new Date(cajaSeleccionada.fechaApertura), 'dd/MM/yyyy HH:mm', { locale: es })}
                  </Typography>
                  {cajaSeleccionada.fechaCierre && (
                    <Typography variant="subtitle1">
                      <strong>Fecha de Cierre:</strong> {format(new Date(cajaSeleccionada.fechaCierre), 'dd/MM/yyyy HH:mm', { locale: es })}
                    </Typography>
                  )}
                  <Typography variant="subtitle1">
                    <strong>Maletín:</strong> {obtenerCodigoMaletin(cajaSeleccionada.maletinId)}
                  </Typography>
                </Paper>
              </Grid>
              
              <Grid item xs={12} md={6}>
                <Paper elevation={3} sx={{ p: 2, mb: 2 }}>
                  <Typography variant="h6" gutterBottom>
                    Resumen de Saldos
                  </Typography>
                  <Typography variant="subtitle1">
                    <strong>Saldo Inicial PYG:</strong> {formatearNumero(cajaSeleccionada.saldoInicial.total.PYG)} Gs
                  </Typography>
                  <Typography variant="subtitle1">
                    <strong>Saldo Inicial BRL:</strong> R$ {new Intl.NumberFormat('pt-BR', { minimumFractionDigits: 2 }).format(cajaSeleccionada.saldoInicial.total.BRL)}
                  </Typography>
                  <Typography variant="subtitle1">
                    <strong>Saldo Inicial USD:</strong> US$ {new Intl.NumberFormat('en-US', { minimumFractionDigits: 2 }).format(cajaSeleccionada.saldoInicial.total.USD)}
                  </Typography>
                  
                  {cajaSeleccionada.saldoFinal && (
                    <>
                      <Divider sx={{ my: 1 }} />
                      <Typography variant="subtitle1">
                        <strong>Saldo Final PYG:</strong> {formatearNumero(cajaSeleccionada.saldoFinal.total.PYG)} Gs
                      </Typography>
                      <Typography variant="subtitle1">
                        <strong>Saldo Final BRL:</strong> R$ {new Intl.NumberFormat('pt-BR', { minimumFractionDigits: 2 }).format(cajaSeleccionada.saldoFinal.total.BRL)}
                      </Typography>
                      <Typography variant="subtitle1">
                        <strong>Saldo Final USD:</strong> US$ {new Intl.NumberFormat('en-US', { minimumFractionDigits: 2 }).format(cajaSeleccionada.saldoFinal.total.USD)}
                      </Typography>
                    </>
                  )}
                </Paper>
              </Grid>
              
              {/* Acciones disponibles */}
              <Grid item xs={12}>
                <Paper elevation={3} sx={{ p: 2 }}>
                  <Typography variant="h6" gutterBottom>
                    Acciones Disponibles
                  </Typography>
                  <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 2, mt: 2 }}>
                    <Button 
                      variant="contained" 
                      color="info"
                      startIcon={<MonetizationOnIcon />}
                      onClick={() => handleVerApertura(cajaSeleccionada)}
                    >
                      Ver Datos de Apertura
                    </Button>
                    
                    <Button 
                      variant="contained" 
                      color="success"
                      startIcon={<AccountBalanceIcon />}
                      onClick={() => handleVerOperacionesBancarias(cajaSeleccionada)}
                    >
                      Operaciones Bancarias
                    </Button>
                    
                    <Button 
                      variant="contained" 
                      color="secondary"
                      startIcon={<AssignmentIcon />}
                      onClick={() => handleVerMovimientos(cajaSeleccionada)}
                    >
                      Ver Movimientos
                    </Button>
                    
                    <Button 
                      variant="contained" 
                      color="warning"
                      startIcon={<AtmIcon />}
                      onClick={() => handleRetiros(cajaSeleccionada)}
                      disabled={cajaSeleccionada.estado !== 'abierta'}
                    >
                      Retiros
                    </Button>
                    <Tooltip title="Pagos">
                      <IconButton
                        size="small"
                        color="primary"
                        onClick={() => handlePagos(cajaSeleccionada)}
                        sx={{ marginRight: 1 }}
                      >
                        <PaymentsIcon fontSize="small" />
                      </IconButton>
                    </Tooltip>
                    
                    <Button 
                      variant="contained" 
                      color="error"
                      startIcon={<CloseIcon />}
                      onClick={() => handleCerrarCaja(cajaSeleccionada)}
                    >
                      {cajaSeleccionada.estado === 'abierta' ? 'Cerrar Caja' : 'Ver Datos de Cierre'}
                    </Button>
                    
                    <Button
                      variant="contained"
                      color="inherit"
                      startIcon={<PrintIcon />}
                      onClick={() => {/* Función para imprimir */}}
                    >
                      Imprimir
                    </Button>
                  </Box>
                </Paper>
              </Grid>
            </Grid>
          </Box>
        )}

        {/* Vista de Cierre de Caja */}
        {tabIndex === 3 && cajaSeleccionada && formCierre && (
          <Box sx={{ p: 3 }}>
            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>
              <Typography variant="h6" gutterBottom>
                Cierre de Caja {formatearIdCaja(cajaSeleccionada.id)}
              </Typography>
              <Button 
                variant="outlined" 
                onClick={handleVolverAListado}
              >
                CANCELAR
              </Button>
            </Box>
            
            <Grid container spacing={3}>
              {/* Información básica - siempre visible */}
              <Grid item xs={12}>
                <Typography variant="subtitle1">
                  <strong>ID:</strong> {formatearIdCaja(cajaSeleccionada.id)}
                </Typography>
                <Typography variant="subtitle1">
                  <strong>Usuario:</strong> {cajaSeleccionada.usuario}
                </Typography>
                <Typography variant="subtitle1">
                  <strong>Fecha de Apertura:</strong> {format(new Date(cajaSeleccionada.fechaApertura), 'dd/MM/yyyy HH:mm', { locale: es })}
                </Typography>
                <Typography variant="subtitle1">
                  <strong>Maletín:</strong> {obtenerCodigoMaletin(cajaSeleccionada.maletinId)}
                </Typography>
                <Divider sx={{ my: 2 }} />
              </Grid>

              {/* Conteo de Guaraníes */}
              <Grid item xs={12} md={4}>
                <Typography variant="subtitle1" gutterBottom>
                  Conteo de Guaraníes
                </Typography>
                <TableContainer component={Paper} variant="outlined">
                  <Table size="small">
                    <TableHead>
                      <TableRow>
                        <TableCell>Denominación</TableCell>
                        <TableCell>Cantidad</TableCell>
                        <TableCell>Subtotal</TableCell>
                      </TableRow>
                    </TableHead>
                    <TableBody>
                      {formCierre.saldoFinal.denominaciones
                        .filter((d: Denominacion) => d.moneda === 'PYG')
                        .map((denom: Denominacion, index: number, arr: Denominacion[]) => {
                          const originalIndex = formCierre.saldoFinal.denominaciones.indexOf(denom);
                          const isLast = index === arr.length - 1;
                          
                          // Determinar el ID del siguiente campo
                          let nextFieldId: string = '';
                          if (isLast) {
                            // Si es el último Guaraní, ir al primer Real
                            const primerReal = formCierre.saldoFinal.denominaciones.find((d: Denominacion) => d.moneda === 'BRL');
                            nextFieldId = primerReal 
                              ? getDenominacionFieldId('BRL', primerReal.valor) 
                              : '';
                          } else {
                            // Ir al siguiente Guaraní
                            nextFieldId = getDenominacionFieldId('PYG', arr[index + 1].valor);
                          }
                          
                          const thisFieldId = getDenominacionFieldId('PYG', denom.valor);
                          
                          return (
                            <TableRow key={`PYG-${denom.valor}`}>
                              <TableCell>
                                {new Intl.NumberFormat('es-PY').format(denom.valor)} Gs
                              </TableCell>
                              <TableCell>
                                <TextField
                                  size="small"
                                  type="number"
                                  value={denom.cantidad}
                                  onChange={(e) => handleDenominacionCierreChange(originalIndex, parseInt(e.target.value) || 0)}
                                  InputProps={{ 
                                    inputProps: { min: 0 },
                                    inputRef: (ref) => registerInputRef(thisFieldId, ref)
                                  }}
                                  onKeyDown={(e) => handleKeyDown(e, nextFieldId)}
                                  onClick={handleInputClick}
                                />
                              </TableCell>
                              <TableCell>
                                {new Intl.NumberFormat('es-PY').format(denom.valor * denom.cantidad)} Gs
                              </TableCell>
                            </TableRow>
                          );
                        })}
                      <TableRow>
                        <TableCell colSpan={2} align="right"><strong>Total Gs:</strong></TableCell>
                        <TableCell>
                          <strong>
                            {new Intl.NumberFormat('es-PY').format(formCierre.saldoFinal.total.PYG)} Gs
                          </strong>
                        </TableCell>
                      </TableRow>
                    </TableBody>
                  </Table>
                </TableContainer>
              </Grid>

              {/* Conteo de Reales */}
              <Grid item xs={12} md={4}>
                <Typography variant="subtitle1" gutterBottom>
                  Conteo de Reales
                </Typography>
                <TableContainer component={Paper} variant="outlined">
                  <Table size="small">
                    <TableHead>
                      <TableRow>
                        <TableCell>Denominación</TableCell>
                        <TableCell>Cantidad</TableCell>
                        <TableCell>Subtotal</TableCell>
                      </TableRow>
                    </TableHead>
                    <TableBody>
                      {formCierre.saldoFinal.denominaciones
                        .filter((d: Denominacion) => d.moneda === 'BRL')
                        .map((denom: Denominacion, index: number, arr: Denominacion[]) => {
                          const originalIndex = formCierre.saldoFinal.denominaciones.indexOf(denom);
                          const isLast = index === arr.length - 1;
                          
                          // Determinar el ID del siguiente campo
                          let nextFieldId: string = '';
                          if (isLast) {
                            // Si es el último Real, ir al primer Dólar
                            const primerDolar = formCierre.saldoFinal.denominaciones.find((d: Denominacion) => d.moneda === 'USD');
                            nextFieldId = primerDolar 
                              ? getDenominacionFieldId('USD', primerDolar.valor) 
                              : '';
                          } else {
                            // Ir al siguiente Real
                            nextFieldId = getDenominacionFieldId('BRL', arr[index + 1].valor);
                          }
                          
                          const thisFieldId = getDenominacionFieldId('BRL', denom.valor);
                          
                          return (
                            <TableRow key={`BRL-${denom.valor}`}>
                              <TableCell>
                                R$ {new Intl.NumberFormat('pt-BR', { minimumFractionDigits: 2, maximumFractionDigits: 2 }).format(denom.valor)}
                              </TableCell>
                              <TableCell>
                                <TextField
                                  size="small"
                                  type="number"
                                  value={denom.cantidad}
                                  onChange={(e) => handleDenominacionCierreChange(originalIndex, parseInt(e.target.value) || 0)}
                                  InputProps={{ 
                                    inputProps: { min: 0 },
                                    inputRef: (ref) => registerInputRef(thisFieldId, ref)
                                  }}
                                  onKeyDown={(e) => handleKeyDown(e, nextFieldId)}
                                  onClick={handleInputClick}
                                />
                              </TableCell>
                              <TableCell>
                                R$ {new Intl.NumberFormat('pt-BR', { minimumFractionDigits: 2, maximumFractionDigits: 2 }).format(denom.valor * denom.cantidad)}
                              </TableCell>
                            </TableRow>
                          );
                        })}
                      <TableRow>
                        <TableCell colSpan={2} align="right"><strong>Total R$:</strong></TableCell>
                        <TableCell>
                          <strong>
                            R$ {new Intl.NumberFormat('pt-BR', { minimumFractionDigits: 2, maximumFractionDigits: 2 }).format(formCierre.saldoFinal.total.BRL)}
                          </strong>
                        </TableCell>
                      </TableRow>
                    </TableBody>
                  </Table>
                </TableContainer>
              </Grid>

              {/* Conteo de Dólares */}
              <Grid item xs={12} md={4}>
                <Typography variant="subtitle1" gutterBottom>
                  Conteo de Dólares
                </Typography>
                <TableContainer component={Paper} variant="outlined">
                  <Table size="small">
                    <TableHead>
                      <TableRow>
                        <TableCell>Denominación</TableCell>
                        <TableCell>Cantidad</TableCell>
                        <TableCell>Subtotal</TableCell>
                      </TableRow>
                    </TableHead>
                    <TableBody>
                      {formCierre.saldoFinal.denominaciones
                        .filter((d: Denominacion) => d.moneda === 'USD')
                        .map((denom: Denominacion, index: number, arr: Denominacion[]) => {
                          const originalIndex = formCierre.saldoFinal.denominaciones.indexOf(denom);
                          const isLast = index === arr.length - 1;
                          
                          // Determinar el ID del siguiente campo
                          let nextFieldId: string = '';
                          if (isLast) {
                            // Si es el último Dólar, ir al primer Servicio
                            const primerServicio = formCierre.saldosServiciosFinal[0];
                            nextFieldId = primerServicio 
                              ? getServicioFieldId(primerServicio.servicio) 
                              : '';
                          } else {
                            // Ir al siguiente Dólar
                            nextFieldId = getDenominacionFieldId('USD', arr[index + 1].valor);
                          }
                          
                          const thisFieldId = getDenominacionFieldId('USD', denom.valor);
                          
                          return (
                            <TableRow key={`USD-${denom.valor}`}>
                              <TableCell>
                                US$ {new Intl.NumberFormat('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }).format(denom.valor)}
                              </TableCell>
                              <TableCell>
                                <TextField
                                  size="small"
                                  type="number"
                                  value={denom.cantidad}
                                  onChange={(e) => handleDenominacionCierreChange(originalIndex, parseInt(e.target.value) || 0)}
                                  InputProps={{ 
                                    inputProps: { min: 0 },
                                    inputRef: (ref) => registerInputRef(thisFieldId, ref)
                                  }}
                                  onKeyDown={(e) => handleKeyDown(e, nextFieldId)}
                                  onClick={handleInputClick}
                                />
                              </TableCell>
                              <TableCell>
                                US$ {new Intl.NumberFormat('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }).format(denom.valor * denom.cantidad)}
                              </TableCell>
                            </TableRow>
                          );
                        })}
                      <TableRow>
                        <TableCell colSpan={2} align="right"><strong>Total US$:</strong></TableCell>
                        <TableCell>
                          <strong>
                            US$ {new Intl.NumberFormat('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }).format(formCierre.saldoFinal.total.USD)}
                          </strong>
                        </TableCell>
                      </TableRow>
                    </TableBody>
                  </Table>
                </TableContainer>
              </Grid>

              {/* Saldos de Servicios */}
              <Grid item xs={12}>
                <Typography variant="subtitle1" gutterBottom>
                  Saldos Finales de Servicios
                </Typography>
                <TableContainer component={Paper} variant="outlined">
                  <Table size="small">
                    <TableHead>
                      <TableRow>
                        <TableCell>Servicio</TableCell>
                        <TableCell>Monto (Gs)</TableCell>
                      </TableRow>
                    </TableHead>
                    <TableBody>
                      {formCierre.saldosServiciosFinal.map((servicio: SaldoServicio, index: number, arr: SaldoServicio[]) => {
                        const isLast = index === arr.length - 1;
                        
                        // Determinar el ID del siguiente campo
                        let nextFieldId: string = '';
                        if (isLast) {
                          // Si es el último servicio, no hay siguiente campo
                          nextFieldId = '';
                        } else {
                          // Ir al siguiente servicio
                          nextFieldId = getServicioFieldId(arr[index + 1].servicio);
                        }
                        
                        const thisFieldId = getServicioFieldId(servicio.servicio);
                        
                        // Formatear el valor para mostrarlo con separadores de miles
                        const valorFormateado = new Intl.NumberFormat('es-PY').format(servicio.monto);
                        
                        return (
                          <TableRow key={servicio.servicio}>
                            <TableCell>{servicio.servicio}</TableCell>
                            <TableCell>
                              <TextField
                                size="small"
                                value={valorFormateado}
                                onChange={(e) => handleServicioCierreChange(index, e.target.value)}
                                InputProps={{ 
                                  inputProps: { min: 0 },
                                  inputRef: (ref) => registerInputRef(thisFieldId, ref)
                                }}
                                onKeyDown={(e) => isLast ? undefined : handleKeyDown(e, nextFieldId)}
                                onClick={handleInputClick}
                              />
                            </TableCell>
                          </TableRow>
                        );
                      })}
                    </TableBody>
                  </Table>
                </TableContainer>
              </Grid>

              {/* Botones de acción */}
              <Grid item xs={12}>
                <Box sx={{ display: 'flex', justifyContent: 'flex-end', gap: 2, mt: 2 }}>
                  <Button 
                    variant="outlined" 
                    onClick={handleVolverAListado}
                  >
                    CANCELAR
                  </Button>
                  <Button 
                    variant="contained" 
                    color="primary"
                    startIcon={<LockOpenIcon />}
                    onClick={handleConfirmarCierre}
                    disabled={cerrandoCaja}
                  >
                    {cerrandoCaja ? <CircularProgress size={24} /> : 'CONFIRMAR CIERRE'}
                  </Button>
                </Box>
              </Grid>
            </Grid>
          </Box>
        )}

        {/* Vista de Datos de Apertura */}
        {tabIndex === 4 && cajaSeleccionada && (
          <Box sx={{ p: 3 }}>
            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>
              <Typography variant="h6" gutterBottom>
                Datos de Apertura de Caja {formatearIdCaja(cajaSeleccionada.id)}
              </Typography>
              <Box>
                {tienePermisoEdicion() && !aperturaEditable && (
                  <Button 
                    variant="contained" 
                    color="primary"
                    onClick={iniciarEdicionApertura}
                    sx={{ mr: 2 }}
                  >
                    EDITAR
                  </Button>
                )}
                {aperturaEditable ? (
                  <>
                    <Button 
                      variant="outlined" 
                      onClick={cancelarEdicionApertura}
                      sx={{ mr: 2 }}
                    >
                      CANCELAR
                    </Button>
                    <Button 
                      variant="contained" 
                      color="success"
                      onClick={guardarCambiosApertura}
                      disabled={guardandoApertura}
                    >
                      {guardandoApertura ? <CircularProgress size={24} /> : 'GUARDAR'}
                    </Button>
                  </>
                ) : (
                  <Button 
                    variant="outlined" 
                    onClick={handleVolverAListado}
                  >
                    VOLVER
                  </Button>
                )}
              </Box>
            </Box>
            
            <Grid container spacing={3}>
              {/* Información básica - siempre visible */}
              <Grid item xs={12}>
                <Typography variant="subtitle1">
                  <strong>ID:</strong> {formatearIdCaja(cajaSeleccionada.id)}
                </Typography>
                <Typography variant="subtitle1">
                  <strong>Usuario:</strong> {cajaSeleccionada.usuario}
                </Typography>
                <Typography variant="subtitle1">
                  <strong>Fecha de Apertura:</strong> {format(new Date(cajaSeleccionada.fechaApertura), 'dd/MM/yyyy HH:mm', { locale: es })}
                </Typography>
                <Typography variant="subtitle1">
                  <strong>Maletín:</strong> {obtenerCodigoMaletin(cajaSeleccionada.maletinId)}
                </Typography>
                <Divider sx={{ my: 2 }} />
              </Grid>
            
              {/* Si está en modo edición, mostrar la misma interfaz que en apertura */}
              {aperturaEditable && formEdicionApertura ? (
                <>
                  {/* Conteo de Guaraníes */}
                  <Grid item xs={12} md={4}>
                    <Typography variant="subtitle1" gutterBottom>
                      Conteo de Guaraníes
                    </Typography>
                    <TableContainer component={Paper} variant="outlined">
                      <Table size="small">
                        <TableHead>
                          <TableRow>
                            <TableCell>Denominación</TableCell>
                            <TableCell>Cantidad</TableCell>
                            <TableCell>Subtotal</TableCell>
                          </TableRow>
                        </TableHead>
                        <TableBody>
                          {formEdicionApertura.saldoInicial.denominaciones
                            .filter((d: Denominacion) => d.moneda === 'PYG')
                            .map((denom: Denominacion, index: number, arr: Denominacion[]) => {
                              const originalIndex = formEdicionApertura.saldoInicial.denominaciones.indexOf(denom);
                              const isLast = index === arr.length - 1;
                              
                              // Determinar el ID del siguiente campo
                              let nextFieldId: string = '';
                              if (isLast) {
                                // Si es el último Guaraní, ir al primer Real
                                const primerReal = formEdicionApertura.saldoInicial.denominaciones.find((d: Denominacion) => d.moneda === 'BRL');
                                nextFieldId = primerReal 
                                  ? getDenominacionFieldId('BRL', primerReal.valor) 
                                  : '';
                              } else {
                                // Ir al siguiente Guaraní
                                nextFieldId = getDenominacionFieldId('PYG', arr[index + 1].valor);
                              }
                              
                              const thisFieldId = getDenominacionFieldId('PYG', denom.valor);
                              
                              return (
                                <TableRow key={`PYG-${denom.valor}`}>
                                  <TableCell>
                                    {new Intl.NumberFormat('es-PY').format(denom.valor)} Gs
                                  </TableCell>
                                  <TableCell>
                                    <TextField
                                      size="small"
                                      type="number"
                                      value={denom.cantidad}
                                      onChange={(e) => handleDenominacionAperturaChange(originalIndex, parseInt(e.target.value) || 0)}
                                      InputProps={{ 
                                        inputProps: { min: 0 },
                                        inputRef: (ref) => registerInputRef(thisFieldId, ref)
                                      }}
                                      onKeyDown={(e) => handleKeyDown(e, nextFieldId)}
                                      onClick={handleInputClick}
                                    />
                                  </TableCell>
                                  <TableCell>
                                    {new Intl.NumberFormat('es-PY').format(denom.valor * denom.cantidad)} Gs
                                  </TableCell>
                                </TableRow>
                              );
                            })}
                          <TableRow>
                            <TableCell colSpan={2} align="right"><strong>Total Gs:</strong></TableCell>
                            <TableCell>
                              <strong>
                                {new Intl.NumberFormat('es-PY').format(formEdicionApertura.saldoInicial.total.PYG)} Gs
                              </strong>
                            </TableCell>
                          </TableRow>
                        </TableBody>
                      </Table>
                    </TableContainer>
                  </Grid>

                  {/* Conteo de Reales */}
                  <Grid item xs={12} md={4}>
                    <Typography variant="subtitle1" gutterBottom>
                      Conteo de Reales
                    </Typography>
                    <TableContainer component={Paper} variant="outlined">
                      <Table size="small">
                        <TableHead>
                          <TableRow>
                            <TableCell>Denominación</TableCell>
                            <TableCell>Cantidad</TableCell>
                            <TableCell>Subtotal</TableCell>
                          </TableRow>
                        </TableHead>
                        <TableBody>
                          {formEdicionApertura.saldoInicial.denominaciones
                            .filter((d: Denominacion) => d.moneda === 'BRL')
                            .map((denom: Denominacion, index: number, arr: Denominacion[]) => {
                              const originalIndex = formEdicionApertura.saldoInicial.denominaciones.indexOf(denom);
                              const isLast = index === arr.length - 1;
                              
                              // Determinar el ID del siguiente campo
                              let nextFieldId: string = '';
                              if (isLast) {
                                // Si es el último Real, ir al primer Dólar
                                const primerDolar = formEdicionApertura.saldoInicial.denominaciones.find((d: Denominacion) => d.moneda === 'USD');
                                nextFieldId = primerDolar 
                                  ? getDenominacionFieldId('USD', primerDolar.valor) 
                                  : '';
                              } else {
                                // Ir al siguiente Real
                                nextFieldId = getDenominacionFieldId('BRL', arr[index + 1].valor);
                              }
                              
                              const thisFieldId = getDenominacionFieldId('BRL', denom.valor);
                              
                              return (
                                <TableRow key={`BRL-${denom.valor}`}>
                                  <TableCell>
                                    R$ {new Intl.NumberFormat('pt-BR', { minimumFractionDigits: 2, maximumFractionDigits: 2 }).format(denom.valor)}
                                  </TableCell>
                                  <TableCell>
                                    <TextField
                                      size="small"
                                      type="number"
                                      value={denom.cantidad}
                                      onChange={(e) => handleDenominacionAperturaChange(originalIndex, parseInt(e.target.value) || 0)}
                                      InputProps={{ 
                                        inputProps: { min: 0 },
                                        inputRef: (ref) => registerInputRef(thisFieldId, ref)
                                      }}
                                      onKeyDown={(e) => handleKeyDown(e, nextFieldId)}
                                      onClick={handleInputClick}
                                    />
                                  </TableCell>
                                  <TableCell>
                                    R$ {new Intl.NumberFormat('pt-BR', { minimumFractionDigits: 2, maximumFractionDigits: 2 }).format(denom.valor * denom.cantidad)}
                                  </TableCell>
                                </TableRow>
                              );
                            })}
                          <TableRow>
                            <TableCell colSpan={2} align="right"><strong>Total R$:</strong></TableCell>
                            <TableCell>
                              <strong>
                                R$ {new Intl.NumberFormat('pt-BR', { minimumFractionDigits: 2, maximumFractionDigits: 2 }).format(formEdicionApertura.saldoInicial.total.BRL)}
                              </strong>
                            </TableCell>
                          </TableRow>
                        </TableBody>
                      </Table>
                    </TableContainer>
                  </Grid>

                  {/* Conteo de Dólares */}
                  <Grid item xs={12} md={4}>
                    <Typography variant="subtitle1" gutterBottom>
                      Conteo de Dólares
                    </Typography>
                    <TableContainer component={Paper} variant="outlined">
                      <Table size="small">
                        <TableHead>
                          <TableRow>
                            <TableCell>Denominación</TableCell>
                            <TableCell>Cantidad</TableCell>
                            <TableCell>Subtotal</TableCell>
                          </TableRow>
                        </TableHead>
                        <TableBody>
                          {formEdicionApertura.saldoInicial.denominaciones
                            .filter((d: Denominacion) => d.moneda === 'USD')
                            .map((denom: Denominacion, index: number, arr: Denominacion[]) => {
                              const originalIndex = formEdicionApertura.saldoInicial.denominaciones.indexOf(denom);
                              const isLast = index === arr.length - 1;
                              
                              // Determinar el ID del siguiente campo
                              let nextFieldId: string = '';
                              if (isLast) {
                                // Si es el último Dólar, ir al primer Servicio
                                const primerServicio = formEdicionApertura.saldosServiciosInicial[0];
                                nextFieldId = primerServicio 
                                  ? getServicioFieldId(primerServicio.servicio) 
                                  : '';
                              } else {
                                // Ir al siguiente Dólar
                                nextFieldId = getDenominacionFieldId('USD', arr[index + 1].valor);
                              }
                              
                              const thisFieldId = getDenominacionFieldId('USD', denom.valor);
                              
                              return (
                                <TableRow key={`USD-${denom.valor}`}>
                                  <TableCell>
                                    US$ {new Intl.NumberFormat('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }).format(denom.valor)}
                                  </TableCell>
                                  <TableCell>
                                    <TextField
                                      size="small"
                                      type="number"
                                      value={denom.cantidad}
                                      onChange={(e) => handleDenominacionAperturaChange(originalIndex, parseInt(e.target.value) || 0)}
                                      InputProps={{ 
                                        inputProps: { min: 0 },
                                        inputRef: (ref) => registerInputRef(thisFieldId, ref)
                                      }}
                                      onKeyDown={(e) => handleKeyDown(e, nextFieldId)}
                                      onClick={handleInputClick}
                                    />
                                  </TableCell>
                                  <TableCell>
                                    US$ {new Intl.NumberFormat('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }).format(denom.valor * denom.cantidad)}
                                  </TableCell>
                                </TableRow>
                              );
                            })}
                          <TableRow>
                            <TableCell colSpan={2} align="right"><strong>Total US$:</strong></TableCell>
                            <TableCell>
                              <strong>
                                US$ {new Intl.NumberFormat('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }).format(formEdicionApertura.saldoInicial.total.USD)}
                              </strong>
                            </TableCell>
                          </TableRow>
                        </TableBody>
                      </Table>
                    </TableContainer>
                  </Grid>

                  {/* Saldos de Servicios */}
                  <Grid item xs={12}>
                    <Typography variant="subtitle1" gutterBottom>
                      Saldos Iniciales de Servicios
                    </Typography>
                    <TableContainer component={Paper} variant="outlined">
                      <Table size="small">
                        <TableHead>
                          <TableRow>
                            <TableCell>Servicio</TableCell>
                            <TableCell>Monto (Gs)</TableCell>
                          </TableRow>
                        </TableHead>
                        <TableBody>
                          {formEdicionApertura.saldosServiciosInicial.map((servicio: SaldoServicio, index: number, arr: SaldoServicio[]) => {
                            const isLast = index === arr.length - 1;
                            
                            // Determinar el ID del siguiente campo
                            let nextFieldId: string = '';
                            if (isLast) {
                              // Si es el último servicio, no hay siguiente campo
                              nextFieldId = '';
                            } else {
                              // Ir al siguiente servicio
                              nextFieldId = getServicioFieldId(arr[index + 1].servicio);
                            }
                            
                            const thisFieldId = getServicioFieldId(servicio.servicio);
                            
                            // Formatear el valor para mostrarlo con separadores de miles
                            const valorFormateado = new Intl.NumberFormat('es-PY').format(servicio.monto);
                            
                            return (
                              <TableRow key={servicio.servicio}>
                                <TableCell>{servicio.servicio}</TableCell>
                                <TableCell>
                                  <TextField
                                    size="small"
                                    value={valorFormateado}
                                    onChange={(e) => handleServicioAperturaChange(index, e.target.value)}
                                    InputProps={{ 
                                      inputProps: { min: 0 },
                                      inputRef: (ref) => registerInputRef(thisFieldId, ref)
                                    }}
                                    onKeyDown={(e) => isLast ? undefined : handleKeyDown(e, nextFieldId)}
                                    onClick={handleInputClick}
                                  />
                                </TableCell>
                              </TableRow>
                            );
                          })}
                        </TableBody>
                      </Table>
                    </TableContainer>
                  </Grid>
                </>
              ) : (
                <>
                  {/* Vista de solo lectura */}
                  <Grid item xs={12} md={4}>
                    <Typography variant="subtitle2" gutterBottom>
                      <strong>Efectivo en Guaraníes:</strong> {new Intl.NumberFormat('es-PY').format(cajaSeleccionada.saldoInicial.total.PYG)} Gs
                    </Typography>
                  </Grid>

                  <Grid item xs={12} md={4}>
                    <Typography variant="subtitle2" gutterBottom>
                      <strong>Efectivo en Reales:</strong> R$ {new Intl.NumberFormat('pt-BR', { minimumFractionDigits: 2, maximumFractionDigits: 2 }).format(cajaSeleccionada.saldoInicial.total.BRL)}
                    </Typography>
                  </Grid>

                  <Grid item xs={12} md={4}>
                    <Typography variant="subtitle2" gutterBottom>
                      <strong>Efectivo en Dólares:</strong> US$ {new Intl.NumberFormat('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }).format(cajaSeleccionada.saldoInicial.total.USD)}
                    </Typography>
                  </Grid>

                  {/* Detalles de denominaciones */}
                  <Grid item xs={12} mt={2}>
                    <Accordion>
                      <AccordionSummary expandIcon={<ExpandMoreIcon />}>
                        <Typography>Ver detalle de denominaciones</Typography>
                      </AccordionSummary>
                      <AccordionDetails>
                        <Grid container spacing={2}>
                          {/* Detalle de Guaraníes */}
                          <Grid item xs={12} md={4}>
                            <Typography variant="subtitle2" gutterBottom>
                              Guaraníes
                            </Typography>
                            <TableContainer component={Paper} variant="outlined">
                              <Table size="small">
                                <TableHead>
                                  <TableRow>
                                    <TableCell>Denominación</TableCell>
                                    <TableCell>Cantidad</TableCell>
                                    <TableCell>Subtotal</TableCell>
                                  </TableRow>
                                </TableHead>
                                <TableBody>
                                  {cajaSeleccionada.saldoInicial.denominaciones
                                    .filter((d: Denominacion) => d.moneda === 'PYG')
                                    .map(denom => (
                                      <TableRow key={`PYG-${denom.valor}`}>
                                        <TableCell>{new Intl.NumberFormat('es-PY').format(denom.valor)} Gs</TableCell>
                                        <TableCell>{denom.cantidad}</TableCell>
                                        <TableCell>{new Intl.NumberFormat('es-PY').format(denom.valor * denom.cantidad)} Gs</TableCell>
                                      </TableRow>
                                    ))}
                                </TableBody>
                              </Table>
                            </TableContainer>
                          </Grid>

                          {/* Detalle de Reales */}
                          <Grid item xs={12} md={4}>
                            <Typography variant="subtitle2" gutterBottom>
                              Reales
                            </Typography>
                            <TableContainer component={Paper} variant="outlined">
                              <Table size="small">
                                <TableHead>
                                  <TableRow>
                                    <TableCell>Denominación</TableCell>
                                    <TableCell>Cantidad</TableCell>
                                    <TableCell>Subtotal</TableCell>
                                  </TableRow>
                                </TableHead>
                                <TableBody>
                                  {cajaSeleccionada.saldoInicial.denominaciones
                                    .filter((d: Denominacion) => d.moneda === 'BRL')
                                    .map(denom => (
                                      <TableRow key={`BRL-${denom.valor}`}>
                                        <TableCell>R$ {new Intl.NumberFormat('pt-BR', { minimumFractionDigits: 2, maximumFractionDigits: 2 }).format(denom.valor)}</TableCell>
                                        <TableCell>{denom.cantidad}</TableCell>
                                        <TableCell>R$ {new Intl.NumberFormat('pt-BR', { minimumFractionDigits: 2, maximumFractionDigits: 2 }).format(denom.valor * denom.cantidad)}</TableCell>
                                      </TableRow>
                                    ))}
                                </TableBody>
                              </Table>
                            </TableContainer>
                          </Grid>

                          {/* Detalle de Dólares */}
                          <Grid item xs={12} md={4}>
                            <Typography variant="subtitle2" gutterBottom>
                              Dólares
                            </Typography>
                            <TableContainer component={Paper} variant="outlined">
                              <Table size="small">
                                <TableHead>
                                  <TableRow>
                                    <TableCell>Denominación</TableCell>
                                    <TableCell>Cantidad</TableCell>
                                    <TableCell>Subtotal</TableCell>
                                  </TableRow>
                                </TableHead>
                                <TableBody>
                                  {cajaSeleccionada.saldoInicial.denominaciones
                                    .filter((d: Denominacion) => d.moneda === 'USD')
                                    .map(denom => (
                                      <TableRow key={`USD-${denom.valor}`}>
                                        <TableCell>US$ {new Intl.NumberFormat('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }).format(denom.valor)}</TableCell>
                                        <TableCell>{denom.cantidad}</TableCell>
                                        <TableCell>US$ {new Intl.NumberFormat('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }).format(denom.valor * denom.cantidad)}</TableCell>
                                      </TableRow>
                                    ))}
                                </TableBody>
                              </Table>
                            </TableContainer>
                          </Grid>
                        </Grid>
                      </AccordionDetails>
                    </Accordion>
                  </Grid>

                  {/* Saldos de Servicios */}
                  {cajaSeleccionada.saldosServiciosInicial && cajaSeleccionada.saldosServiciosInicial.length > 0 && (
                    <Grid item xs={12} mt={2}>
                      <Typography variant="subtitle1" gutterBottom>
                        Saldos Iniciales de Servicios
                      </Typography>
                      <TableContainer component={Paper} variant="outlined">
                        <Table size="small">
                          <TableHead>
                            <TableRow>
                              <TableCell>Servicio</TableCell>
                              <TableCell>Monto (Gs)</TableCell>
                            </TableRow>
                          </TableHead>
                          <TableBody>
                            {cajaSeleccionada.saldosServiciosInicial.map((servicio) => (
                              <TableRow key={servicio.servicio}>
                                <TableCell>{servicio.servicio}</TableCell>
                                <TableCell>{new Intl.NumberFormat('es-PY').format(servicio.monto)} Gs</TableCell>
                              </TableRow>
                            ))}
                          </TableBody>
                        </Table>
                      </TableContainer>
                    </Grid>
                  )}
                </>
              )}
            </Grid>
          </Box>
        )}

        {/* Vista de Datos de Cierre */}
        {tabIndex === 5 && cajaSeleccionada && (
          <Box sx={{ p: 3 }}>
            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>
              <Typography variant="h6" gutterBottom>
                Datos de Cierre de Caja {formatearIdCaja(cajaSeleccionada.id)}
              </Typography>
              <Box>
                {tienePermisoEdicion() && !cierreEditable && cajaSeleccionada.estado === 'cerrada' && (
                  <Button 
                    variant="contained" 
                    color="primary"
                    onClick={iniciarEdicionCierre}
                    sx={{ mr: 2 }}
                  >
                    EDITAR
                  </Button>
                )}
                {cierreEditable ? (
                  <>
                    <Button 
                      variant="outlined" 
                      onClick={cancelarEdicionCierre}
                      sx={{ mr: 2 }}
                    >
                      CANCELAR
                    </Button>
                    <Button 
                      variant="contained" 
                      color="success"
                      onClick={guardarCambiosCierre}
                      disabled={guardandoCierre}
                    >
                      {guardandoCierre ? <CircularProgress size={24} /> : 'GUARDAR'}
                    </Button>
                  </>
                ) : (
                  <Button 
                    variant="outlined" 
                    onClick={handleVolverAListado}
                  >
                    VOLVER
                  </Button>
                )}
              </Box>
            </Box>
            
            <Grid container spacing={3}>
              {/* Información básica - siempre visible */}
              <Grid item xs={12}>
                <Typography variant="subtitle1">
                  <strong>ID:</strong> {formatearIdCaja(cajaSeleccionada.id)}
                </Typography>
                <Typography variant="subtitle1">
                  <strong>Usuario:</strong> {cajaSeleccionada.usuario}
                </Typography>
                <Typography variant="subtitle1">
                  <strong>Fecha de Apertura:</strong> {format(new Date(cajaSeleccionada.fechaApertura), 'dd/MM/yyyy HH:mm', { locale: es })}
                </Typography>
                {cajaSeleccionada.fechaCierre && (
                  <Typography variant="subtitle1">
                    <strong>Fecha de Cierre:</strong> {format(new Date(cajaSeleccionada.fechaCierre), 'dd/MM/yyyy HH:mm', { locale: es })}
                  </Typography>
                )}
                <Typography variant="subtitle1">
                  <strong>Maletín:</strong> {obtenerCodigoMaletin(cajaSeleccionada.maletinId)}
                </Typography>
                <Divider sx={{ my: 2 }} />
              </Grid>
            
              {/* Si está en modo edición, mostrar la misma interfaz que en apertura */}
              {cierreEditable && formEdicionCierre ? (
                <>
                  {/* Conteo de Guaraníes */}
                  <Grid item xs={12} md={4}>
                    <Typography variant="subtitle1" gutterBottom>
                      Conteo de Guaraníes
                    </Typography>
                    <TableContainer component={Paper} variant="outlined">
                      <Table size="small">
                        <TableHead>
                          <TableRow>
                            <TableCell>Denominación</TableCell>
                            <TableCell>Cantidad</TableCell>
                            <TableCell>Subtotal</TableCell>
                          </TableRow>
                        </TableHead>
                        <TableBody>
                          {formEdicionCierre.saldoFinal.denominaciones
                            .filter((d: Denominacion) => d.moneda === 'PYG')
                            .map((denom: Denominacion, index: number, arr: Denominacion[]) => {
                              const originalIndex = formEdicionCierre.saldoFinal.denominaciones.indexOf(denom);
                              const isLast = index === arr.length - 1;
                              
                              // Determinar el ID del siguiente campo
                              let nextFieldId: string = '';
                              if (isLast) {
                                // Si es el último Guaraní, ir al primer Real
                                const primerReal = formEdicionCierre.saldoFinal.denominaciones.find((d: Denominacion) => d.moneda === 'BRL');
                                nextFieldId = primerReal 
                                  ? getDenominacionFieldId('BRL', primerReal.valor) 
                                  : '';
                              } else {
                                // Ir al siguiente Guaraní
                                nextFieldId = getDenominacionFieldId('PYG', arr[index + 1].valor);
                              }
                              
                              const thisFieldId = getDenominacionFieldId('PYG', denom.valor);
                              
                              return (
                                <TableRow key={`PYG-${denom.valor}`}>
                                  <TableCell>
                                    {new Intl.NumberFormat('es-PY').format(denom.valor)} Gs
                                  </TableCell>
                                  <TableCell>
                                    <TextField
                                      size="small"
                                      type="number"
                                      value={denom.cantidad}
                                      onChange={(e) => handleDenominacionCierreEdicionChange(originalIndex, parseInt(e.target.value) || 0)}
                                      InputProps={{ 
                                        inputProps: { min: 0 },
                                        inputRef: (ref) => registerInputRef(thisFieldId, ref)
                                      }}
                                      onKeyDown={(e) => handleKeyDown(e, nextFieldId)}
                                      onClick={handleInputClick}
                                    />
                                  </TableCell>
                                  <TableCell>
                                    {new Intl.NumberFormat('es-PY').format(denom.valor * denom.cantidad)} Gs
                                  </TableCell>
                                </TableRow>
                              );
                            })}
                          <TableRow>
                            <TableCell colSpan={2} align="right"><strong>Total Gs:</strong></TableCell>
                            <TableCell>
                              <strong>
                                {new Intl.NumberFormat('es-PY').format(formEdicionCierre.saldoFinal.total.PYG)} Gs
                              </strong>
                            </TableCell>
                          </TableRow>
                        </TableBody>
                      </Table>
                    </TableContainer>
                  </Grid>

                  {/* Conteo de Reales */}
                  <Grid item xs={12} md={4}>
                    <Typography variant="subtitle1" gutterBottom>
                      Conteo de Reales
                    </Typography>
                    <TableContainer component={Paper} variant="outlined">
                      <Table size="small">
                        <TableHead>
                          <TableRow>
                            <TableCell>Denominación</TableCell>
                            <TableCell>Cantidad</TableCell>
                            <TableCell>Subtotal</TableCell>
                          </TableRow>
                        </TableHead>
                        <TableBody>
                          {formEdicionCierre.saldoFinal.denominaciones
                            .filter((d: Denominacion) => d.moneda === 'BRL')
                            .map((denom: Denominacion, index: number, arr: Denominacion[]) => {
                              const originalIndex = formEdicionCierre.saldoFinal.denominaciones.indexOf(denom);
                              const isLast = index === arr.length - 1;
                              
                              // Determinar el ID del siguiente campo
                              let nextFieldId: string = '';
                              if (isLast) {
                                // Si es el último Real, ir al primer Dólar
                                const primerDolar = formEdicionCierre.saldoFinal.denominaciones.find((d: Denominacion) => d.moneda === 'USD');
                                nextFieldId = primerDolar 
                                  ? getDenominacionFieldId('USD', primerDolar.valor) 
                                  : '';
                              } else {
                                // Ir al siguiente Real
                                nextFieldId = getDenominacionFieldId('BRL', arr[index + 1].valor);
                              }
                              
                              const thisFieldId = getDenominacionFieldId('BRL', denom.valor);
                              
                              return (
                                <TableRow key={`BRL-${denom.valor}`}>
                                  <TableCell>
                                    R$ {new Intl.NumberFormat('pt-BR', { minimumFractionDigits: 2, maximumFractionDigits: 2 }).format(denom.valor)}
                                  </TableCell>
                                  <TableCell>
                                    <TextField
                                      size="small"
                                      type="number"
                                      value={denom.cantidad}
                                      onChange={(e) => handleDenominacionCierreEdicionChange(originalIndex, parseInt(e.target.value) || 0)}
                                      InputProps={{ 
                                        inputProps: { min: 0 },
                                        inputRef: (ref) => registerInputRef(thisFieldId, ref)
                                      }}
                                      onKeyDown={(e) => handleKeyDown(e, nextFieldId)}
                                      onClick={handleInputClick}
                                    />
                                  </TableCell>
                                  <TableCell>
                                    R$ {new Intl.NumberFormat('pt-BR', { minimumFractionDigits: 2, maximumFractionDigits: 2 }).format(denom.valor * denom.cantidad)}
                                  </TableCell>
                                </TableRow>
                              );
                            })}
                          <TableRow>
                            <TableCell colSpan={2} align="right"><strong>Total R$:</strong></TableCell>
                            <TableCell>
                              <strong>
                                R$ {new Intl.NumberFormat('pt-BR', { minimumFractionDigits: 2, maximumFractionDigits: 2 }).format(formEdicionCierre.saldoFinal.total.BRL)}
                              </strong>
                            </TableCell>
                          </TableRow>
                        </TableBody>
                      </Table>
                    </TableContainer>
                  </Grid>

                  {/* Conteo de Dólares */}
                  <Grid item xs={12} md={4}>
                    <Typography variant="subtitle1" gutterBottom>
                      Conteo de Dólares
                    </Typography>
                    <TableContainer component={Paper} variant="outlined">
                      <Table size="small">
                        <TableHead>
                          <TableRow>
                            <TableCell>Denominación</TableCell>
                            <TableCell>Cantidad</TableCell>
                            <TableCell>Subtotal</TableCell>
                          </TableRow>
                        </TableHead>
                        <TableBody>
                          {formEdicionCierre.saldoFinal.denominaciones
                            .filter((d: Denominacion) => d.moneda === 'USD')
                            .map((denom: Denominacion, index: number, arr: Denominacion[]) => {
                              const originalIndex = formEdicionCierre.saldoFinal.denominaciones.indexOf(denom);
                              const isLast = index === arr.length - 1;
                              
                              // Determinar el ID del siguiente campo
                              let nextFieldId: string = '';
                              if (isLast) {
                                // Si es el último Dólar, ir al primer Servicio
                                const primerServicio = formEdicionCierre.saldosServiciosFinal[0];
                                nextFieldId = primerServicio 
                                  ? getServicioFieldId(primerServicio.servicio) 
                                  : '';
                              } else {
                                // Ir al siguiente Dólar
                                nextFieldId = getDenominacionFieldId('USD', arr[index + 1].valor);
                              }
                              
                              const thisFieldId = getDenominacionFieldId('USD', denom.valor);
                              
                              return (
                                <TableRow key={`USD-${denom.valor}`}>
                                  <TableCell>
                                    US$ {new Intl.NumberFormat('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }).format(denom.valor)}
                                  </TableCell>
                                  <TableCell>
                                    <TextField
                                      size="small"
                                      type="number"
                                      value={denom.cantidad}
                                      onChange={(e) => handleDenominacionCierreEdicionChange(originalIndex, parseInt(e.target.value) || 0)}
                                      InputProps={{ 
                                        inputProps: { min: 0 },
                                        inputRef: (ref) => registerInputRef(thisFieldId, ref)
                                      }}
                                      onKeyDown={(e) => handleKeyDown(e, nextFieldId)}
                                      onClick={handleInputClick}
                                    />
                                  </TableCell>
                                  <TableCell>
                                    US$ {new Intl.NumberFormat('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }).format(denom.valor * denom.cantidad)}
                                  </TableCell>
                                </TableRow>
                              );
                            })}
                          <TableRow>
                            <TableCell colSpan={2} align="right"><strong>Total US$:</strong></TableCell>
                            <TableCell>
                              <strong>
                                US$ {new Intl.NumberFormat('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }).format(formEdicionCierre.saldoFinal.total.USD)}
                              </strong>
                            </TableCell>
                          </TableRow>
                        </TableBody>
                      </Table>
                    </TableContainer>
                  </Grid>

                  {/* Saldos de Servicios */}
                  {formEdicionCierre.saldosServiciosFinal && formEdicionCierre.saldosServiciosFinal.length > 0 && (
                    <Grid item xs={12}>
                      <Typography variant="subtitle1" gutterBottom>
                        Saldos Finales de Servicios
                      </Typography>
                      <TableContainer component={Paper} variant="outlined">
                        <Table size="small">
                          <TableHead>
                            <TableRow>
                              <TableCell>Servicio</TableCell>
                              <TableCell>Monto (Gs)</TableCell>
                            </TableRow>
                          </TableHead>
                          <TableBody>
                            {formEdicionCierre.saldosServiciosFinal.map((servicio: SaldoServicio, index: number, arr: SaldoServicio[]) => {
                              const isLast = index === arr.length - 1;
                              
                              // Determinar el ID del siguiente campo
                              let nextFieldId: string = '';
                              if (isLast) {
                                // Si es el último servicio, no hay siguiente campo
                                nextFieldId = '';
                              } else {
                                // Ir al siguiente servicio
                                nextFieldId = getServicioFieldId(arr[index + 1].servicio);
                              }
                              
                              const thisFieldId = getServicioFieldId(servicio.servicio);
                              
                              // Formatear el valor para mostrarlo con separadores de miles
                              const valorFormateado = new Intl.NumberFormat('es-PY').format(servicio.monto);
                              
                              return (
                                <TableRow key={servicio.servicio}>
                                  <TableCell>{servicio.servicio}</TableCell>
                                  <TableCell>
                                    <TextField
                                      size="small"
                                      value={valorFormateado}
                                      onChange={(e) => handleServicioCierreEdicionChange(index, e.target.value)}
                                      InputProps={{ 
                                        inputProps: { min: 0 },
                                        inputRef: (ref) => registerInputRef(thisFieldId, ref)
                                      }}
                                      onKeyDown={(e) => isLast ? undefined : handleKeyDown(e, nextFieldId)}
                                      onClick={handleInputClick}
                                    />
                                  </TableCell>
                                </TableRow>
                              );
                            })}
                          </TableBody>
                        </Table>
                      </TableContainer>
                    </Grid>
                  )}
                </>
              ) : (
                <>
                  {/* Vista de solo lectura */}
                  <Grid item xs={12} md={4}>
                    <Typography variant="subtitle2" gutterBottom>
                      <strong>Efectivo en Guaraníes:</strong> {new Intl.NumberFormat('es-PY').format(cajaSeleccionada.saldoFinal?.total.PYG || 0)} Gs
                    </Typography>
                  </Grid>

                  <Grid item xs={12} md={4}>
                    <Typography variant="subtitle2" gutterBottom>
                      <strong>Efectivo en Reales:</strong> R$ {new Intl.NumberFormat('pt-BR', { minimumFractionDigits: 2, maximumFractionDigits: 2 }).format(cajaSeleccionada.saldoFinal?.total.BRL || 0)}
                    </Typography>
                  </Grid>

                  <Grid item xs={12} md={4}>
                    <Typography variant="subtitle2" gutterBottom>
                      <strong>Efectivo en Dólares:</strong> US$ {new Intl.NumberFormat('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }).format(cajaSeleccionada.saldoFinal?.total.USD || 0)}
                    </Typography>
                  </Grid>

                  {/* Detalles de denominaciones */}
                  <Grid item xs={12} mt={2}>
                    <Accordion>
                      <AccordionSummary expandIcon={<ExpandMoreIcon />}>
                        <Typography>Ver detalle de denominaciones</Typography>
                      </AccordionSummary>
                      <AccordionDetails>
                        <Grid container spacing={2}>
                          {/* Detalle de Guaraníes */}
                          <Grid item xs={12} md={4}>
                            <Typography variant="subtitle2" gutterBottom>
                              Guaraníes
                            </Typography>
                            <TableContainer component={Paper} variant="outlined">
                              <Table size="small">
                                <TableHead>
                                  <TableRow>
                                    <TableCell>Denominación</TableCell>
                                    <TableCell>Cantidad</TableCell>
                                    <TableCell>Subtotal</TableCell>
                                  </TableRow>
                                </TableHead>
                                <TableBody>
                                  {cajaSeleccionada.saldoFinal?.denominaciones
                                    ?.filter((d: Denominacion) => d.moneda === 'PYG')
                                    .map((denom: Denominacion) => (
                                      <TableRow key={`PYG-${denom.valor}`}>
                                        <TableCell>{new Intl.NumberFormat('es-PY').format(denom.valor)} Gs</TableCell>
                                        <TableCell>{denom.cantidad}</TableCell>
                                        <TableCell>{new Intl.NumberFormat('es-PY').format(denom.valor * denom.cantidad)} Gs</TableCell>
                                      </TableRow>
                                    )) || []}
                                  <TableRow>
                                    <TableCell colSpan={2} align="right"><strong>Total Gs:</strong></TableCell>
                                    <TableCell><strong>{new Intl.NumberFormat('es-PY').format(cajaSeleccionada.saldoFinal?.total.PYG || 0)} Gs</strong></TableCell>
                                  </TableRow>
                                </TableBody>
                              </Table>
                            </TableContainer>
                          </Grid>
                          
                          {/* Detalle de Reales */}
                          <Grid item xs={12} md={4}>
                            <Typography variant="subtitle2" gutterBottom>
                              Reales
                            </Typography>
                            <TableContainer component={Paper} variant="outlined">
                              <Table size="small">
                                <TableHead>
                                  <TableRow>
                                    <TableCell>Denominación</TableCell>
                                    <TableCell>Cantidad</TableCell>
                                    <TableCell>Subtotal</TableCell>
                                  </TableRow>
                                </TableHead>
                                <TableBody>
                                  {cajaSeleccionada.saldoFinal?.denominaciones
                                    ?.filter((d: Denominacion) => d.moneda === 'BRL')
                                    .map((denom: Denominacion) => (
                                      <TableRow key={`BRL-${denom.valor}`}>
                                        <TableCell>R$ {new Intl.NumberFormat('pt-BR', { minimumFractionDigits: 2, maximumFractionDigits: 2 }).format(denom.valor)}</TableCell>
                                        <TableCell>{denom.cantidad}</TableCell>
                                        <TableCell>R$ {new Intl.NumberFormat('pt-BR', { minimumFractionDigits: 2, maximumFractionDigits: 2 }).format(denom.valor * denom.cantidad)}</TableCell>
                                      </TableRow>
                                    )) || []}
                                  <TableRow>
                                    <TableCell colSpan={2} align="right"><strong>Total R$:</strong></TableCell>
                                    <TableCell><strong>R$ {new Intl.NumberFormat('pt-BR', { minimumFractionDigits: 2, maximumFractionDigits: 2 }).format(cajaSeleccionada.saldoFinal?.total.BRL || 0)}</strong></TableCell>
                                  </TableRow>
                                </TableBody>
                              </Table>
                            </TableContainer>
                          </Grid>
                          
                          {/* Detalle de Dólares */}
                          <Grid item xs={12} md={4}>
                            <Typography variant="subtitle2" gutterBottom>
                              Dólares
                            </Typography>
                            <TableContainer component={Paper} variant="outlined">
                              <Table size="small">
                                <TableHead>
                                  <TableRow>
                                    <TableCell>Denominación</TableCell>
                                    <TableCell>Cantidad</TableCell>
                                    <TableCell>Subtotal</TableCell>
                                  </TableRow>
                                </TableHead>
                                <TableBody>
                                  {cajaSeleccionada.saldoFinal?.denominaciones
                                    ?.filter((d: Denominacion) => d.moneda === 'USD')
                                    .map((denom: Denominacion) => (
                                      <TableRow key={`USD-${denom.valor}`}>
                                        <TableCell>US$ {new Intl.NumberFormat('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }).format(denom.valor)}</TableCell>
                                        <TableCell>{denom.cantidad}</TableCell>
                                        <TableCell>US$ {new Intl.NumberFormat('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }).format(denom.valor * denom.cantidad)}</TableCell>
                                      </TableRow>
                                    )) || []}
                                  <TableRow>
                                    <TableCell colSpan={2} align="right"><strong>Total US$:</strong></TableCell>
                                    <TableCell><strong>US$ {new Intl.NumberFormat('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }).format(cajaSeleccionada.saldoFinal?.total.USD || 0)}</strong></TableCell>
                                  </TableRow>
                                </TableBody>
                              </Table>
                            </TableContainer>
                          </Grid>
                        </Grid>
                      </AccordionDetails>
                    </Accordion>
                  </Grid>
                  
                  {/* Saldos de Servicios */}
                  {cajaSeleccionada.saldosServiciosFinal && cajaSeleccionada.saldosServiciosFinal.length > 0 && (
                    <Grid item xs={12} mt={2}>
                      <Accordion>
                        <AccordionSummary expandIcon={<ExpandMoreIcon />}>
                          <Typography>Ver saldos finales de servicios</Typography>
                        </AccordionSummary>
                        <AccordionDetails>
                          <TableContainer component={Paper} variant="outlined">
                            <Table size="small">
                              <TableHead>
                                <TableRow>
                                  <TableCell>Servicio</TableCell>
                                  <TableCell>Monto (Gs)</TableCell>
                                </TableRow>
                              </TableHead>
                              <TableBody>
                                {cajaSeleccionada.saldosServiciosFinal.map((servicio: SaldoServicio) => (
                                  <TableRow key={servicio.servicio}>
                                    <TableCell>{servicio.servicio}</TableCell>
                                    <TableCell>{new Intl.NumberFormat('es-PY').format(servicio.monto)} Gs</TableCell>
                                  </TableRow>
                                ))}
                              </TableBody>
                            </Table>
                          </TableContainer>
                        </AccordionDetails>
                      </Accordion>
                    </Grid>
                  )}
                </>
              )}
            </Grid>
          </Box>
        )}

        {/* Mensajes de éxito y error */}
        <Snackbar
          open={!!successMessage}
          autoHideDuration={6000}
          onClose={() => setSuccessMessage(null)}
          anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}
        >
          <Alert onClose={() => setSuccessMessage(null)} severity="success">
            {successMessage}
          </Alert>
        </Snackbar>

        <Snackbar
          open={!!errorMessage}
          autoHideDuration={6000}
          onClose={() => setErrorMessage(null)}
          anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}
        >
          <Alert onClose={() => setErrorMessage(null)} severity="error">
            {errorMessage}
          </Alert>
        </Snackbar>
      </Paper>

      {/* Modal para mostrar los movimientos por operadora */}
      <Dialog 
        open={movimientosDialogOpen} 
        onClose={() => setMovimientosDialogOpen(false)}
        maxWidth="lg"
        fullWidth
      >
        <DialogTitle>
          Movimientos por Operadora - {cajaSeleccionada ? formatearIdCaja(cajaSeleccionada.id) : ''}
        </DialogTitle>
        <DialogContent>
          <Grid container spacing={3}>
            {/* Columna TIGO */}
            <Grid item xs={12} md={4}>
              <Paper elevation={2} sx={{ p: 2, height: '100%' }}>
                <Typography variant="h6" gutterBottom sx={{ color: 'primary.main', borderBottom: '1px solid', pb: 1 }}>
                  TIGO
                </Typography>
                <TableContainer>
                  <Table size="small">
                    <TableHead>
                      <TableRow>
                        <TableCell>Servicio</TableCell>
                        <TableCell align="right">Monto</TableCell>
                        <TableCell align="center">Acciones</TableCell>
                      </TableRow>
                    </TableHead>
                    <TableBody>
                      <TableRow>
                        <TableCell>Mini Carga</TableCell>
                        <TableCell align="right">
                          <TextField
                            variant="outlined"
                            size="small"
                            value={formatGuaranies(movimientosData.tigo.miniCarga)}
                            onChange={(e) => handleMovimientoChange('tigo', 'miniCarga', e.target.value)}
                            InputProps={{ 
                              endAdornment: <Typography variant="caption">₲</Typography>,
                              inputProps: { 
                                style: { textAlign: 'right' },
                                onClick: handleInputClick // Agregar manejo de clic para seleccionar texto
                              }
                            }}
                            sx={{ width: '135%' }}
                            onKeyDown={(e) => handleKeyDown(e, getNextMovimientoFieldId('tigo', 'miniCarga'))} // Agregar navegación con Enter
                            inputRef={(ref) => registerInputRef(getMovimientoFieldId('tigo', 'miniCarga'), ref)} // Registrar referencia
                          />
                        </TableCell>
                        <TableCell align="center">
                          <Box sx={{ display: 'flex', justifyContent: 'center' }}>
                            <IconButton 
                              size="small" 
                              component="label" 
                              color="primary"
                              title="Subir comprobante"
                            >
                              <AttachFileIcon fontSize="small" />
                              <input
                                type="file"
                                hidden
                                accept="image/*"
                                onChange={(e) => handleFileUpload('tigo', 'miniCarga', e)}
                              />
                            </IconButton>
                            <IconButton 
                              size="small" 
                              color="info"
                              onClick={() => handleVerComprobante('tigo', 'miniCarga')}
                              disabled={!comprobantes.tigo_miniCarga}
                              title="Ver comprobante"
                            >
                              <VisibilityIcon fontSize="small" />
                            </IconButton>
                          </Box>
                        </TableCell>
                      </TableRow>
                      <TableRow>
                        <TableCell>Giros Enviados</TableCell>
                        <TableCell align="right">
                          <TextField
                            variant="outlined"
                            size="small"
                            value={formatGuaranies(movimientosData.tigo.girosEnviados)}
                            onChange={(e) => handleMovimientoChange('tigo', 'girosEnviados', e.target.value)}
                            InputProps={{ 
                              endAdornment: <Typography variant="caption">₲</Typography>,
                              inputProps: { 
                                style: { textAlign: 'right' },
                                onClick: handleInputClick
                              }
                            }}
                            sx={{ width: '135%' }}
                            onKeyDown={(e) => handleKeyDown(e, getNextMovimientoFieldId('tigo', 'girosEnviados'))}
                            inputRef={(ref) => registerInputRef(getMovimientoFieldId('tigo', 'girosEnviados'), ref)}
                          />
                        </TableCell>
                        <TableCell align="center">
                          <Box sx={{ display: 'flex', justifyContent: 'center' }}>
                            <IconButton 
                              size="small" 
                              component="label" 
                              color="primary"
                              title="Subir comprobante"
                            >
                              <AttachFileIcon fontSize="small" />
                              <input
                                type="file"
                                hidden
                                accept="image/*"
                                onChange={(e) => handleFileUpload('tigo', 'girosEnviados', e)}
                              />
                            </IconButton>
                            <IconButton 
                              size="small" 
                              color="info"
                              onClick={() => handleVerComprobante('tigo', 'girosEnviados')}
                              disabled={!comprobantes.tigo_girosEnviados}
                              title="Ver comprobante"
                            >
                              <VisibilityIcon fontSize="small" />
                            </IconButton>
                          </Box>
                        </TableCell>
                      </TableRow>
                      <TableRow>
                        <TableCell>Retiros</TableCell>
                        <TableCell align="right">
                          <TextField
                            variant="outlined"
                            size="small"
                            value={formatGuaranies(movimientosData.tigo.retiros)}
                            onChange={(e) => handleMovimientoChange('tigo', 'retiros', e.target.value)}
                            InputProps={{ 
                              endAdornment: <Typography variant="caption">₲</Typography>,
                              inputProps: { 
                                style: { textAlign: 'right' },
                                onClick: handleInputClick
                              }
                            }}
                            sx={{ width: '135%' }}
                            onKeyDown={(e) => handleKeyDown(e, getNextMovimientoFieldId('tigo', 'retiros'))}
                            inputRef={(ref) => registerInputRef(getMovimientoFieldId('tigo', 'retiros'), ref)}
                          />
                        </TableCell>
                        <TableCell align="center">
                          <Box sx={{ display: 'flex', justifyContent: 'center' }}>
                            <IconButton 
                              size="small" 
                              component="label" 
                              color="primary"
                              title="Subir comprobante"
                            >
                              <AttachFileIcon fontSize="small" />
                              <input
                                type="file"
                                hidden
                                accept="image/*"
                                onChange={(e) => handleFileUpload('tigo', 'retiros', e)}
                              />
                            </IconButton>
                            <IconButton 
                              size="small" 
                              color="info"
                              onClick={() => handleVerComprobante('tigo', 'retiros')}
                              disabled={!comprobantes.tigo_retiros}
                              title="Ver comprobante"
                            >
                              <VisibilityIcon fontSize="small" />
                            </IconButton>
                          </Box>
                        </TableCell>
                      </TableRow>
                      <TableRow>
                        <TableCell>Carga de Billeteras</TableCell>
                        <TableCell align="right">
                          <TextField
                            variant="outlined"
                            size="small"
                            value={formatGuaranies(movimientosData.tigo.cargaBilleteras)}
                            onChange={(e) => handleMovimientoChange('tigo', 'cargaBilleteras', e.target.value)}
                            InputProps={{ 
                              endAdornment: <Typography variant="caption">₲</Typography>,
                              inputProps: { 
                                style: { textAlign: 'right' },
                                onClick: handleInputClick
                              }
                            }}
                            sx={{ width: '135%' }}
                            onKeyDown={(e) => handleKeyDown(e, getNextMovimientoFieldId('tigo', 'cargaBilleteras'))}
                            inputRef={(ref) => registerInputRef(getMovimientoFieldId('tigo', 'cargaBilleteras'), ref)}
                          />
                        </TableCell>
                        <TableCell align="center">
                          <Box sx={{ display: 'flex', justifyContent: 'center' }}>
                            <IconButton 
                              size="small" 
                              component="label" 
                              color="primary"
                              title="Subir comprobante"
                            >
                              <AttachFileIcon fontSize="small" />
                              <input
                                type="file"
                                hidden
                                accept="image/*"
                                onChange={(e) => handleFileUpload('tigo', 'cargaBilleteras', e)}
                              />
                            </IconButton>
                            <IconButton 
                              size="small" 
                              color="info"
                              onClick={() => handleVerComprobante('tigo', 'cargaBilleteras')}
                              disabled={!comprobantes.tigo_cargaBilleteras}
                              title="Ver comprobante"
                            >
                              <VisibilityIcon fontSize="small" />
                            </IconButton>
                          </Box>
                        </TableCell>
                      </TableRow>
                    </TableBody>
                  </Table>
                </TableContainer>
              </Paper>
            </Grid>
            
            {/* Columna PERSONAL */}
            <Grid item xs={12} md={4}>
              <Paper elevation={2} sx={{ p: 2, height: '100%' }}>
                <Typography variant="h6" gutterBottom sx={{ color: 'secondary.main', borderBottom: '1px solid', pb: 1 }}>
                  PERSONAL
                </Typography>
                <TableContainer>
                  <Table size="small">
                    <TableHead>
                      <TableRow>
                        <TableCell>Servicio</TableCell>
                        <TableCell align="right">Monto</TableCell>
                        <TableCell align="center">Acciones</TableCell>
                      </TableRow>
                    </TableHead>
                    <TableBody>
                      <TableRow>
                        <TableCell>Maxi Carga</TableCell>
                        <TableCell align="right">
                          <TextField
                            variant="outlined"
                            size="small"
                            value={formatGuaranies(movimientosData.personal.maxiCarga)}
                            onChange={(e) => handleMovimientoChange('personal', 'maxiCarga', e.target.value)}
                            InputProps={{ 
                              endAdornment: <Typography variant="caption">₲</Typography>,
                              inputProps: { 
                                style: { textAlign: 'right' },
                                onClick: handleInputClick
                              }
                            }}
                            sx={{ width: '135%' }}
                            onKeyDown={(e) => handleKeyDown(e, getNextMovimientoFieldId('personal', 'maxiCarga'))}
                            inputRef={(ref) => registerInputRef(getMovimientoFieldId('personal', 'maxiCarga'), ref)}
                          />
                        </TableCell>
                        <TableCell align="center">
                          <Box sx={{ display: 'flex', justifyContent: 'center' }}>
                            <IconButton 
                              size="small" 
                              component="label" 
                              color="primary"
                              title="Subir comprobante"
                            >
                              <AttachFileIcon fontSize="small" />
                              <input
                                type="file"
                                hidden
                                accept="image/*"
                                onChange={(e) => handleFileUpload('personal', 'maxiCarga', e)}
                              />
                            </IconButton>
                            <IconButton 
                              size="small" 
                              color="info"
                              onClick={() => handleVerComprobante('personal', 'maxiCarga')}
                              disabled={!comprobantes.personal_maxiCarga}
                              title="Ver comprobante"
                            >
                              <VisibilityIcon fontSize="small" />
                            </IconButton>
                          </Box>
                        </TableCell>
                      </TableRow>
                      <TableRow>
                        <TableCell>Giros Enviados</TableCell>
                        <TableCell align="right">
                          <TextField
                            variant="outlined"
                            size="small"
                            value={formatGuaranies(movimientosData.personal.girosEnviados)}
                            onChange={(e) => handleMovimientoChange('personal', 'girosEnviados', e.target.value)}
                            InputProps={{ 
                              endAdornment: <Typography variant="caption">₲</Typography>,
                              inputProps: { 
                                style: { textAlign: 'right' },
                                onClick: handleInputClick
                              }
                            }}
                            sx={{ width: '135%' }}
                            onKeyDown={(e) => handleKeyDown(e, getNextMovimientoFieldId('personal', 'girosEnviados'))}
                            inputRef={(ref) => registerInputRef(getMovimientoFieldId('personal', 'girosEnviados'), ref)}
                          />
                        </TableCell>
                        <TableCell align="center">
                          <Box sx={{ display: 'flex', justifyContent: 'center' }}>
                            <IconButton 
                              size="small" 
                              component="label" 
                              color="primary"
                              title="Subir comprobante"
                            >
                              <AttachFileIcon fontSize="small" />
                              <input
                                type="file"
                                hidden
                                accept="image/*"
                                onChange={(e) => handleFileUpload('personal', 'girosEnviados', e)}
                              />
                            </IconButton>
                            <IconButton 
                              size="small" 
                              color="info"
                              onClick={() => handleVerComprobante('personal', 'girosEnviados')}
                              disabled={!comprobantes.personal_girosEnviados}
                              title="Ver comprobante"
                            >
                              <VisibilityIcon fontSize="small" />
                            </IconButton>
                          </Box>
                        </TableCell>
                      </TableRow>
                      <TableRow>
                        <TableCell>Retiros</TableCell>
                        <TableCell align="right">
                          <TextField
                            variant="outlined"
                            size="small"
                            value={formatGuaranies(movimientosData.personal.retiros)}
                            onChange={(e) => handleMovimientoChange('personal', 'retiros', e.target.value)}
                            InputProps={{ 
                              endAdornment: <Typography variant="caption">₲</Typography>,
                              inputProps: { 
                                style: { textAlign: 'right' },
                                onClick: handleInputClick
                              }
                            }}
                            sx={{ width: '135%' }}
                            onKeyDown={(e) => handleKeyDown(e, getNextMovimientoFieldId('personal', 'retiros'))}
                            inputRef={(ref) => registerInputRef(getMovimientoFieldId('personal', 'retiros'), ref)}
                          />
                        </TableCell>
                        <TableCell align="center">
                          <Box sx={{ display: 'flex', justifyContent: 'center' }}>
                            <IconButton 
                              size="small" 
                              component="label" 
                              color="primary"
                              title="Subir comprobante"
                            >
                              <AttachFileIcon fontSize="small" />
                              <input
                                type="file"
                                hidden
                                accept="image/*"
                                onChange={(e) => handleFileUpload('personal', 'retiros', e)}
                              />
                            </IconButton>
                            <IconButton 
                              size="small" 
                              color="info"
                              onClick={() => handleVerComprobante('personal', 'retiros')}
                              disabled={!comprobantes.personal_retiros}
                              title="Ver comprobante"
                            >
                              <VisibilityIcon fontSize="small" />
                            </IconButton>
                          </Box>
                        </TableCell>
                      </TableRow>
                      <TableRow>
                        <TableCell>Carga de Billeteras</TableCell>
                        <TableCell align="right">
                          <TextField
                            variant="outlined"
                            size="small"
                            value={formatGuaranies(movimientosData.personal.cargaBilleteras)}
                            onChange={(e) => handleMovimientoChange('personal', 'cargaBilleteras', e.target.value)}
                            InputProps={{ 
                              endAdornment: <Typography variant="caption">₲</Typography>,
                              inputProps: { 
                                style: { textAlign: 'right' },
                                onClick: handleInputClick
                              }
                            }}
                            sx={{ width: '135%' }}
                            onKeyDown={(e) => handleKeyDown(e, getNextMovimientoFieldId('personal', 'cargaBilleteras'))}
                            inputRef={(ref) => registerInputRef(getMovimientoFieldId('personal', 'cargaBilleteras'), ref)}
                          />
                        </TableCell>
                        <TableCell align="center">
                          <Box sx={{ display: 'flex', justifyContent: 'center' }}>
                            <IconButton 
                              size="small" 
                              component="label" 
                              color="primary"
                              title="Subir comprobante"
                            >
                              <AttachFileIcon fontSize="small" />
                              <input
                                type="file"
                                hidden
                                accept="image/*"
                                onChange={(e) => handleFileUpload('personal', 'cargaBilleteras', e)}
                              />
                            </IconButton>
                            <IconButton 
                              size="small" 
                              color="info"
                              onClick={() => handleVerComprobante('personal', 'cargaBilleteras')}
                              disabled={!comprobantes.personal_cargaBilleteras}
                              title="Ver comprobante"
                            >
                              <VisibilityIcon fontSize="small" />
                            </IconButton>
                          </Box>
                        </TableCell>
                      </TableRow>
                    </TableBody>
                  </Table>
                </TableContainer>
              </Paper>
            </Grid>
            
            {/* Columna CLARO */}
            <Grid item xs={12} md={4}>
              <Paper elevation={2} sx={{ p: 2, height: '100%' }}>
                <Typography variant="h6" gutterBottom sx={{ color: 'error.main', borderBottom: '1px solid', pb: 1 }}>
                  CLARO
                </Typography>
                <TableContainer>
                  <Table size="small">
                    <TableHead>
                      <TableRow>
                        <TableCell>Servicio</TableCell>
                        <TableCell align="right">Monto</TableCell>
                        <TableCell align="center">Acciones</TableCell>
                      </TableRow>
                    </TableHead>
                    <TableBody>
                      <TableRow>
                        <TableCell>Recarga Claro</TableCell>
                        <TableCell align="right">
                          <TextField
                            variant="outlined"
                            size="small"
                            value={formatGuaranies(movimientosData.claro.recargaClaro)}
                            onChange={(e) => handleMovimientoChange('claro', 'recargaClaro', e.target.value)}
                            InputProps={{ 
                              endAdornment: <Typography variant="caption">₲</Typography>,
                              inputProps: { 
                                style: { textAlign: 'right' },
                                onClick: handleInputClick
                              }
                            }}
                            sx={{ width: '135%' }}
                            onKeyDown={(e) => handleKeyDown(e, getNextMovimientoFieldId('claro', 'recargaClaro'))}
                            inputRef={(ref) => registerInputRef(getMovimientoFieldId('claro', 'recargaClaro'), ref)}
                          />
                        </TableCell>
                        <TableCell align="center">
                          <Box sx={{ display: 'flex', justifyContent: 'center' }}>
                            <IconButton 
                              size="small" 
                              component="label" 
                              color="primary"
                              title="Subir comprobante"
                            >
                              <AttachFileIcon fontSize="small" />
                              <input
                                type="file"
                                hidden
                                accept="image/*"
                                onChange={(e) => handleFileUpload('claro', 'recargaClaro', e)}
                              />
                            </IconButton>
                            <IconButton 
                              size="small" 
                              color="info"
                              onClick={() => handleVerComprobante('claro', 'recargaClaro')}
                              disabled={!comprobantes.claro_recargaClaro}
                              title="Ver comprobante"
                            >
                              <VisibilityIcon fontSize="small" />
                            </IconButton>
                          </Box>
                        </TableCell>
                      </TableRow>
                      <TableRow>
                        <TableCell>Giros Enviados</TableCell>
                        <TableCell align="right">
                          <TextField
                            variant="outlined"
                            size="small"
                            value={formatGuaranies(movimientosData.claro.girosEnviados)}
                            onChange={(e) => handleMovimientoChange('claro', 'girosEnviados', e.target.value)}
                            InputProps={{ 
                              endAdornment: <Typography variant="caption">₲</Typography>,
                              inputProps: { 
                                style: { textAlign: 'right' },
                                onClick: handleInputClick
                              }
                            }}
                            sx={{ width: '135%' }}
                            onKeyDown={(e) => handleKeyDown(e, getNextMovimientoFieldId('claro', 'girosEnviados'))}
                            inputRef={(ref) => registerInputRef(getMovimientoFieldId('claro', 'girosEnviados'), ref)}
                          />
                        </TableCell>
                        <TableCell align="center">
                          <Box sx={{ display: 'flex', justifyContent: 'center' }}>
                            <IconButton 
                              size="small" 
                              component="label" 
                              color="primary"
                              title="Subir comprobante"
                            >
                              <AttachFileIcon fontSize="small" />
                              <input
                                type="file"
                                hidden
                                accept="image/*"
                                onChange={(e) => handleFileUpload('claro', 'girosEnviados', e)}
                              />
                            </IconButton>
                            <IconButton 
                              size="small" 
                              color="info"
                              onClick={() => handleVerComprobante('claro', 'girosEnviados')}
                              disabled={!comprobantes.claro_girosEnviados}
                              title="Ver comprobante"
                            >
                              <VisibilityIcon fontSize="small" />
                            </IconButton>
                          </Box>
                        </TableCell>
                      </TableRow>
                      <TableRow>
                        <TableCell>Retiros</TableCell>
                        <TableCell align="right">
                          <TextField
                            variant="outlined"
                            size="small"
                            value={formatGuaranies(movimientosData.claro.retiros)}
                            onChange={(e) => handleMovimientoChange('claro', 'retiros', e.target.value)}
                            InputProps={{ 
                              endAdornment: <Typography variant="caption">₲</Typography>,
                              inputProps: { 
                                style: { textAlign: 'right' },
                                onClick: handleInputClick
                              }
                            }}
                            sx={{ width: '135%' }}
                            onKeyDown={(e) => handleKeyDown(e, getNextMovimientoFieldId('claro', 'retiros'))}
                            inputRef={(ref) => registerInputRef(getMovimientoFieldId('claro', 'retiros'), ref)}
                          />
                        </TableCell>
                        <TableCell align="center">
                          <Box sx={{ display: 'flex', justifyContent: 'center' }}>
                            <IconButton 
                              size="small" 
                              component="label" 
                              color="primary"
                              title="Subir comprobante"
                            >
                              <AttachFileIcon fontSize="small" />
                              <input
                                type="file"
                                hidden
                                accept="image/*"
                                onChange={(e) => handleFileUpload('claro', 'retiros', e)}
                              />
                            </IconButton>
                            <IconButton 
                              size="small" 
                              color="info"
                              onClick={() => handleVerComprobante('claro', 'retiros')}
                              disabled={!comprobantes.claro_retiros}
                              title="Ver comprobante"
                            >
                              <VisibilityIcon fontSize="small" />
                            </IconButton>
                          </Box>
                        </TableCell>
                      </TableRow>
                      <TableRow>
                        <TableCell>Carga de Billeteras</TableCell>
                        <TableCell align="right">
                          <TextField
                            variant="outlined"
                            size="small"
                            value={formatGuaranies(movimientosData.claro.cargaBilleteras)}
                            onChange={(e) => handleMovimientoChange('claro', 'cargaBilleteras', e.target.value)}
                            InputProps={{ 
                              endAdornment: <Typography variant="caption">₲</Typography>,
                              inputProps: { 
                                style: { textAlign: 'right' },
                                onClick: handleInputClick
                              }
                            }}
                            sx={{ width: '135%' }}
                            onKeyDown={(e) => handleKeyDown(e, getNextMovimientoFieldId('claro', 'cargaBilleteras'))}
                            inputRef={(ref) => registerInputRef(getMovimientoFieldId('claro', 'cargaBilleteras'), ref)}
                          />
                        </TableCell>
                        <TableCell align="center">
                          <Box sx={{ display: 'flex', justifyContent: 'center' }}>
                            <IconButton 
                              size="small" 
                              component="label" 
                              color="primary"
                              title="Subir comprobante"
                            >
                              <AttachFileIcon fontSize="small" />
                              <input
                                type="file"
                                hidden
                                accept="image/*"
                                onChange={(e) => handleFileUpload('claro', 'cargaBilleteras', e)}
                              />
                            </IconButton>
                            <IconButton 
                              size="small" 
                              color="info"
                              onClick={() => handleVerComprobante('claro', 'cargaBilleteras')}
                              disabled={!comprobantes.claro_cargaBilleteras}
                              title="Ver comprobante"
                            >
                              <VisibilityIcon fontSize="small" />
                            </IconButton>
                          </Box>
                        </TableCell>
                      </TableRow>
                    </TableBody>
                  </Table>
                </TableContainer>
              </Paper>
            </Grid>
            
            {/* Segunda fila */}
            {/* Columna AQUÍ PAGO */}
            <Grid item xs={12} md={4}>
              <Paper elevation={2} sx={{ p: 2, height: '100%' }}>
                <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', borderBottom: '1px solid', pb: 1 }}>
                  <Typography variant="h6" gutterBottom sx={{ color: 'success.main', mb: 0 }}>
                    AQUÍ PAGO
                  </Typography>
                  <Box>
                    <IconButton 
                      size="small" 
                      component="label" 
                      color="primary"
                      title="Subir comprobante"
                    >
                      <AttachFileIcon fontSize="small" />
                      <input
                        type="file"
                        hidden
                        accept="image/*"
                        onChange={(e) => handleFileUpload('aquiPago', '', e)}
                      />
                    </IconButton>
                    <IconButton 
                      size="small" 
                      color="info"
                      onClick={() => handleVerComprobante('aquiPago', '')}
                      disabled={!comprobantes.aquiPago}
                      title="Ver comprobante"
                    >
                      <VisibilityIcon fontSize="small" />
                    </IconButton>
                  </Box>
                </Box>
                <TableContainer>
                  <Table size="small">
                    <TableHead>
                      <TableRow>
                        <TableCell>Servicio</TableCell>
                        <TableCell align="right">Monto</TableCell>
                      </TableRow>
                    </TableHead>
                    <TableBody>
                      <TableRow>
                        <TableCell>Pagos</TableCell>
                        <TableCell align="right">
                          <TextField
                            variant="outlined"
                            size="small"
                            value={formatGuaranies(movimientosData.aquiPago.pagos)}
                            onChange={(e) => handleMovimientoChange('aquiPago', 'pagos', e.target.value)}
                            InputProps={{ 
                              endAdornment: <Typography variant="caption">₲</Typography>,
                              inputProps: { 
                                style: { textAlign: 'right' },
                                onClick: handleInputClick
                              }
                            }}
                            sx={{ width: '95%' }}
                            onKeyDown={(e) => handleKeyDown(e, getNextMovimientoFieldId('aquiPago', 'pagos'))}
                            inputRef={(ref) => registerInputRef(getMovimientoFieldId('aquiPago', 'pagos'), ref)}
                          />
                        </TableCell>
                      </TableRow>
                      <TableRow>
                        <TableCell>Retiros</TableCell>
                        <TableCell align="right">
                          <TextField
                            variant="outlined"
                            size="small"
                            value={formatGuaranies(movimientosData.aquiPago.retiros)}
                            onChange={(e) => handleMovimientoChange('aquiPago', 'retiros', e.target.value)}
                            InputProps={{ 
                              endAdornment: <Typography variant="caption">₲</Typography>,
                              inputProps: { 
                                style: { textAlign: 'right' },
                                onClick: handleInputClick
                              }
                            }}
                            sx={{ width: '95%' }}
                            onKeyDown={(e) => handleKeyDown(e, getNextMovimientoFieldId('aquiPago', 'retiros'))}
                            inputRef={(ref) => registerInputRef(getMovimientoFieldId('aquiPago', 'retiros'), ref)}
                          />
                        </TableCell>
                      </TableRow>
                    </TableBody>
                  </Table>
                </TableContainer>
              </Paper>
            </Grid>
            
            {/* Columna WEPA GUARANÍES */}
            <Grid item xs={12} md={4}>
              <Paper elevation={2} sx={{ p: 2, height: '100%' }}>
                <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', borderBottom: '1px solid', pb: 1 }}>
                  <Typography variant="h6" gutterBottom sx={{ color: 'info.main', mb: 0 }}>
                    WEPA GUARANÍES
                  </Typography>
                  <Box>
                    <IconButton 
                      size="small" 
                      component="label" 
                      color="primary"
                      title="Subir comprobante"
                    >
                      <AttachFileIcon fontSize="small" />
                      <input
                        type="file"
                        hidden
                        accept="image/*"
                        onChange={(e) => handleFileUpload('wepaGuaranies', '', e)}
                      />
                    </IconButton>
                    <IconButton 
                      size="small" 
                      color="info"
                      onClick={() => handleVerComprobante('wepaGuaranies', '')}
                      disabled={!comprobantes.wepaGuaranies}
                      title="Ver comprobante"
                    >
                      <VisibilityIcon fontSize="small" />
                    </IconButton>
                  </Box>
                </Box>
                <TableContainer>
                  <Table size="small">
                    <TableHead>
                      <TableRow>
                        <TableCell>Servicio</TableCell>
                        <TableCell align="right">Monto</TableCell>
                      </TableRow>
                    </TableHead>
                    <TableBody>
                      <TableRow>
                        <TableCell>Pagos</TableCell>
                        <TableCell align="right">
                          <TextField
                            variant="outlined"
                            size="small"
                            value={formatGuaranies(movimientosData.wepaGuaranies.pagos)}
                            onChange={(e) => handleMovimientoChange('wepaGuaranies', 'pagos', e.target.value)}
                            InputProps={{ 
                              endAdornment: <Typography variant="caption">₲</Typography>,
                              inputProps: { 
                                style: { textAlign: 'right' },
                                onClick: handleInputClick
                              }
                            }}
                            sx={{ width: '95%' }}
                            onKeyDown={(e) => handleKeyDown(e, getNextMovimientoFieldId('wepaGuaranies', 'pagos'))}
                            inputRef={(ref) => registerInputRef(getMovimientoFieldId('wepaGuaranies', 'pagos'), ref)}
                          />
                        </TableCell>
                      </TableRow>
                      <TableRow>
                        <TableCell>Retiros</TableCell>
                        <TableCell align="right">
                          <TextField
                            variant="outlined"
                            size="small"
                            value={formatGuaranies(movimientosData.wepaGuaranies.retiros)}
                            onChange={(e) => handleMovimientoChange('wepaGuaranies', 'retiros', e.target.value)}
                            InputProps={{ 
                              endAdornment: <Typography variant="caption">₲</Typography>,
                              inputProps: { 
                                style: { textAlign: 'right' },
                                onClick: handleInputClick
                              }
                            }}
                            sx={{ width: '95%' }}
                            onKeyDown={(e) => handleKeyDown(e, getNextMovimientoFieldId('wepaGuaranies', 'retiros'))}
                            inputRef={(ref) => registerInputRef(getMovimientoFieldId('wepaGuaranies', 'retiros'), ref)}
                          />
                        </TableCell>
                      </TableRow>
                    </TableBody>
                  </Table>
                </TableContainer>
              </Paper>
            </Grid>
            
            {/* Columna WEPA DÓLARES */}
            <Grid item xs={12} md={4}>
              <Paper elevation={2} sx={{ p: 2, height: '100%' }}>
                <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', borderBottom: '1px solid', pb: 1 }}>
                  <Typography variant="h6" gutterBottom sx={{ color: 'warning.main', mb: 0 }}>
                    WEPA DÓLARES
                  </Typography>
                  <Box>
                    <IconButton 
                      size="small" 
                      component="label" 
                      color="primary"
                      title="Subir comprobante"
                    >
                      <AttachFileIcon fontSize="small" />
                      <input
                        type="file"
                        hidden
                        accept="image/*"
                        onChange={(e) => handleFileUpload('wepaDolares', '', e)}
                      />
                    </IconButton>
                    <IconButton 
                      size="small" 
                      color="info"
                      onClick={() => handleVerComprobante('wepaDolares', '')}
                      disabled={!comprobantes.wepaDolares}
                      title="Ver comprobante"
                    >
                      <VisibilityIcon fontSize="small" />
                    </IconButton>
                  </Box>
                </Box>
                <TableContainer>
                  <Table size="small">
                    <TableHead>
                      <TableRow>
                        <TableCell>Servicio</TableCell>
                        <TableCell align="right">Monto</TableCell>
                      </TableRow>
                    </TableHead>
                    <TableBody>
                      <TableRow>
                        <TableCell>Pagos</TableCell>
                        <TableCell align="right">
                          <TextField
                            variant="outlined"
                            size="small"
                            value={movimientosData.wepaDolares.pagos}
                            onChange={(e) => handleMovimientoChange('wepaDolares', 'pagos', e.target.value)}
                            InputProps={{ 
                              endAdornment: <Typography variant="caption">$</Typography>,
                              inputProps: { 
                                style: { textAlign: 'right' },
                                onClick: handleInputClick
                              }
                            }}
                            sx={{ width: '95%' }}
                            onKeyDown={(e) => handleKeyDown(e, getNextMovimientoFieldId('wepaDolares', 'pagos'))}
                            inputRef={(ref) => registerInputRef(getMovimientoFieldId('wepaDolares', 'pagos'), ref)}
                          />
                        </TableCell>
                      </TableRow>
                      <TableRow>
                        <TableCell>Retiros</TableCell>
                        <TableCell align="right">
                          <TextField
                            variant="outlined"
                            size="small"
                            value={movimientosData.wepaDolares.retiros}
                            onChange={(e) => handleMovimientoChange('wepaDolares', 'retiros', e.target.value)}
                            InputProps={{ 
                              endAdornment: <Typography variant="caption">$</Typography>,
                              inputProps: { 
                                style: { textAlign: 'right' },
                                onClick: handleInputClick
                              }
                            }}
                            sx={{ width: '95%' }}
                            onKeyDown={(e) => handleKeyDown(e, getNextMovimientoFieldId('wepaDolares', 'retiros'))}
                            inputRef={(ref) => registerInputRef(getMovimientoFieldId('wepaDolares', 'retiros'), ref)}
                          />
                        </TableCell>
                      </TableRow>
                    </TableBody>
                  </Table>
                </TableContainer>
              </Paper>
            </Grid>
          </Grid>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setMovimientosDialogOpen(false)} variant="outlined">
            Cancelar
          </Button>
          <Button 
            variant="contained" 
            color="primary" 
            onClick={handleGuardarMovimientos}
          >
            Guardar
          </Button>
        </DialogActions>
      </Dialog>
      
      {/* Diálogo para operaciones bancarias */}
      <Dialog 
        open={operacionesBancariasDialogOpen} 
        onClose={handleCloseOperacionesBancarias}
        fullWidth
        maxWidth="md"
      >
        <DialogTitle sx={{ bgcolor: 'primary.main', color: 'white', display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
          <Typography variant="h6">
            Operaciones Bancarias - Caja {cajaSeleccionada ? formatearIdCaja(cajaSeleccionada.id) : ''}
          </Typography>
          <Button 
            variant="contained" 
            color="secondary" 
            startIcon={<AddIcon />}
            onClick={handleNuevaOperacion}
          >
            Nueva Operación
          </Button>
        </DialogTitle>
        
        <DialogContent>
          <Box sx={{ mt: 2 }}>
            {operacionesBancarias.length === 0 ? (
              <Typography align="center" sx={{ my: 4 }}>
                No hay operaciones bancarias registradas para esta caja.
              </Typography>
            ) : (
              <TableContainer component={Paper}>
                <Table size="small">
                  <TableHead>
                    <TableRow>
                      <TableCell>Fecha</TableCell>
                      <TableCell>Tipo</TableCell>
                      <TableCell>Servicio</TableCell>
                      <TableCell>Detalles</TableCell>
                      <TableCell align="right">Monto</TableCell>
                      <TableCell align="right">Monto Cobrado</TableCell>
                      <TableCell align="center">Acciones</TableCell>
                    </TableRow>
                  </TableHead>
                  <TableBody>
                    {operacionesBancarias.map((operacion) => (
                      <TableRow key={operacion.id}>
                        <TableCell>{operacion.fecha}</TableCell>
                        <TableCell>{operacion.tipo === 'pos' ? 'POS' : 'Transferencia'}</TableCell>
                        <TableCell>{operacion.tipoServicio}</TableCell>
                        <TableCell>
                          {operacion.tipo === 'pos' 
                            ? `${operacion.posDescripcion} - Comprobante: ${operacion.numeroComprobante}` 
                            : operacion.cuentaBancaria}
                        </TableCell>
                        <TableCell align="right">{formatearMontoConSeparadores(operacion.monto)} ₲</TableCell>
                        <TableCell align="right">
                          {operacion.montoACobrar ? `${formatearMontoConSeparadores(operacion.montoACobrar)} ₲` : '-'}
                        </TableCell>
                        <TableCell align="center">
                          <Tooltip title="Editar operación">
                            <IconButton 
                              size="small" 
                              color="primary"
                              onClick={() => handleEditarOperacion(operacion)}
                              sx={{ marginRight: 1 }}
                            >
                              <EditIcon fontSize="small" />
                            </IconButton>
                          </Tooltip>
                          <Tooltip title="Eliminar operación">
                            <IconButton 
                              size="small" 
                              color="error"
                              onClick={() => handleEliminarOperacion(operacion.id || '')}
                            >
                              <DeleteIcon fontSize="small" />
                            </IconButton>
                          </Tooltip>
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </TableContainer>
            )}
          </Box>
        </DialogContent>
        
        <DialogActions>
          <Button onClick={handleCloseOperacionesBancarias} variant="outlined">
            Cerrar
          </Button>
        </DialogActions>
      </Dialog>

      {/* Diálogo del formulario de nueva operación bancaria */}
      <Dialog 
        open={formOperacionDialogOpen} 
        onClose={handleCloseFormOperacion}
        fullWidth
        maxWidth="md"
      >
        <DialogTitle sx={{ bgcolor: 'primary.main', color: 'white' }}>
          {formOperacion.id ? 'Editar' : 'Nueva'} Operación Bancaria - Caja {cajaSeleccionada ? formatearIdCaja(cajaSeleccionada.id) : ''}
        </DialogTitle>
        
        <DialogContent>
          <Box sx={{ mt: 2 }}>
            <Grid container spacing={2}>
              {/* Tipo de operación */}
              <Grid item xs={12}>
                <FormControl fullWidth>
                  <InputLabel id="tipo-operacion-label">Tipo de Operación</InputLabel>
                  <Select
                    labelId="tipo-operacion-label"
                    id="tipo"
                    name="tipo"
                    value={formOperacion.tipo}
                    label="Tipo de Operación"
                    onChange={handleOperacionSelectChange}
                  >
                    <MenuItem value="pos">POS</MenuItem>
                    <MenuItem value="transferencia">Transferencia Bancaria</MenuItem>
                  </Select>
                </FormControl>
              </Grid>
              
              {/* Campos específicos según el tipo */}
              {formOperacion.tipo === 'transferencia' && (
                <Grid item xs={12}>
                  <FormControl fullWidth>
                    <InputLabel id="cuenta-bancaria-label">Cuenta Bancaria</InputLabel>
                    <Select
                      labelId="cuenta-bancaria-label"
                      id="cuentaBancariaId"
                      name="cuentaBancariaId"
                      value={formOperacion.cuentaBancariaId || ''}
                      label="Cuenta Bancaria"
                      onChange={handleOperacionSelectChange}
                    >
                      <MenuItem value="">Seleccione una cuenta</MenuItem>
                      {cuentasBancarias.map(cuenta => (
                        <MenuItem key={cuenta.id} value={cuenta.id}>
                          {cuenta.banco} - {cuenta.numeroCuenta} ({cuenta.moneda})
                        </MenuItem>
                      ))}
                    </Select>
                  </FormControl>
                </Grid>
              )}
              
              {formOperacion.tipo === 'pos' && (
                <>
                  <Grid item xs={12} md={6}>
                    <TextField
                      fullWidth
                      label="Código de Barras POS"
                      name="codigoBarrasPos"
                      value={formOperacion.codigoBarrasPos || ''}
                      onChange={handleOperacionFormChange}
                      onClick={handleInputClick}
                    />
                  </Grid>
                  <Grid item xs={12} md={6}>
                    <TextField
                      fullWidth
                      label="Descripción POS"
                      name="posDescripcion"
                      value={formOperacion.posDescripcion || ''}
                      onChange={handleOperacionFormChange}
                      onClick={handleInputClick}
                      InputProps={{
                        readOnly: true
                      }}
                      disabled
                    />
                  </Grid>
                  <Grid item xs={12} md={6}>
                    <TextField
                      fullWidth
                      label="Número de Comprobante"
                      name="numeroComprobante"
                      value={formOperacion.numeroComprobante || ''}
                      onChange={handleOperacionFormChange}
                      onClick={handleInputClick}
                    />
                  </Grid>
                </>
              )}
              
              <Grid item xs={12} md={6}>
                <TextField
                  fullWidth
                  label="Monto de Operación"
                  name="monto"
                  value={formatearMontoConSeparadores(formOperacion.monto)}
                  onChange={handleOperacionFormChange}
                  onClick={handleInputClick}
                  InputProps={{
                    startAdornment: <Typography variant="body2" sx={{ mr: 1 }}>₲</Typography>,
                  }}
                />
              </Grid>
              
              {formOperacion.tipo === 'pos' && (
                <Grid item xs={12} md={6}>
                  <TextField
                    fullWidth
                    label="Monto a Cobrar (incluye 6%)"
                    name="montoACobrar"
                    value={formatearMontoConSeparadores(formOperacion.montoACobrar || 0)}
                    onClick={handleInputClick}
                    InputProps={{
                      readOnly: true,
                      startAdornment: <Typography variant="body2" sx={{ mr: 1 }}>₲</Typography>,
                    }}
                    disabled
                  />
                </Grid>
              )}
              
              <Grid item xs={12}>
                <FormControl fullWidth>
                  <InputLabel id="tipo-servicio-label">Tipo de Servicio</InputLabel>
                  <Select
                    labelId="tipo-servicio-label"
                    id="tipoServicio"
                    name="tipoServicio"
                    value={formOperacion.tipoServicio}
                    label="Tipo de Servicio"
                    onChange={handleOperacionSelectChange}
                    MenuProps={{
                      PaperProps: {
                        style: {
                          maxHeight: 300,
                          width: 'auto'
                        }
                      }
                    }}
                    renderValue={(selected) => selected as string}
                  >
                    <MenuItem value="">Seleccione un servicio</MenuItem>
                    <Divider />
                    
                    {/* Servicios organizados por operador */}
                    <Box sx={{ display: 'flex', p: 1 }} onClick={(e) => e.stopPropagation()}>
                      {/* Columna TIGO */}
                      <Box sx={{ width: 200, mr: 2 }}>
                        <Typography variant="subtitle2" sx={{ fontWeight: 'bold', mb: 1, color: '#00489D' }}>
                          TIGO
                        </Typography>
                        <MenuItem 
                          value="Tigo Mini Carga"
                          onClick={(event) => seleccionarServicio("Tigo Mini Carga", event)}
                        >
                          Mini Carga
                        </MenuItem>
                        <MenuItem 
                          value="Tigo Giros Enviados"
                          onClick={(event) => seleccionarServicio("Tigo Giros Enviados", event)}
                        >
                          Giros Enviados
                        </MenuItem>
                        <MenuItem 
                          value="Tigo Retiros"
                          onClick={(event) => seleccionarServicio("Tigo Retiros", event)}
                        >
                          Retiros
                        </MenuItem>
                        <MenuItem 
                          value="Tigo Carga Billeteras"
                          onClick={(event) => seleccionarServicio("Tigo Carga Billeteras", event)}
                        >
                          Carga Billeteras
                        </MenuItem>
                      </Box>
                      
                      {/* Columna PERSONAL */}
                      <Box sx={{ width: 200, mr: 2 }}>
                        <Typography variant="subtitle2" sx={{ fontWeight: 'bold', mb: 1, color: '#E40520' }}>
                          PERSONAL
                        </Typography>
                        <MenuItem 
                          value="Personal Maxi Carga"
                          onClick={(event) => seleccionarServicio("Personal Maxi Carga", event)}
                        >
                          Maxi Carga
                        </MenuItem>
                        <MenuItem 
                          value="Personal Giros Enviados"
                          onClick={(event) => seleccionarServicio("Personal Giros Enviados", event)}
                        >
                          Giros Enviados
                        </MenuItem>
                        <MenuItem 
                          value="Personal Carga Billeteras"
                          onClick={(event) => seleccionarServicio("Personal Carga Billeteras", event)}
                        >
                          Carga Billeteras
                        </MenuItem>
                      </Box>
                      
                      {/* Columna CLARO */}
                      <Box sx={{ width: 200, mr: 2 }}>
                        <Typography variant="subtitle2" sx={{ fontWeight: 'bold', mb: 1, color: '#DA291C' }}>
                          CLARO
                        </Typography>
                        <MenuItem 
                          value="Claro Recarga"
                          onClick={(event) => seleccionarServicio("Claro Recarga", event)}
                        >
                          Recarga
                        </MenuItem>
                        <MenuItem 
                          value="Claro Giros Enviados"
                          onClick={(event) => seleccionarServicio("Claro Giros Enviados", event)}
                        >
                          Giros Enviados
                        </MenuItem>
                        <MenuItem 
                          value="Claro Carga Billeteras"
                          onClick={(event) => seleccionarServicio("Claro Carga Billeteras", event)}
                        >
                          Carga Billeteras
                        </MenuItem>
                      </Box>
                      
                      {/* Columna OTROS */}
                      <Box sx={{ width: 200 }}>
                        <Typography variant="subtitle2" sx={{ fontWeight: 'bold', mb: 1, color: '#212121' }}>
                          OTROS SERVICIOS
                        </Typography>
                        <MenuItem 
                          value="Aquí Pago - Pagos"
                          onClick={(event) => seleccionarServicio("Aquí Pago - Pagos", event)}
                        >
                          Aquí Pago - Pagos
                        </MenuItem>
                        <MenuItem 
                          value="Wepa Guaraníes - Pagos"
                          onClick={(event) => seleccionarServicio("Wepa Guaraníes - Pagos", event)}
                        >
                          Wepa Guaraníes - Pagos
                        </MenuItem>
                        <MenuItem 
                          value="Wepa Dólares - Pagos"
                          onClick={(event) => seleccionarServicio("Wepa Dólares - Pagos", event)}
                        >
                          Wepa Dólares - Pagos
                        </MenuItem>
                        <MenuItem 
                          value="RETIRO DE TARJETAS"
                          onClick={(event) => seleccionarServicio("RETIRO DE TARJETAS", event)}
                        >
                          RETIRO DE TARJETAS
                        </MenuItem>
                      </Box>
                    </Box>
                  </Select>
                </FormControl>
              </Grid>
              
              <Grid item xs={12}>
                <Button
                  component="label"
                  variant="outlined"
                  startIcon={<AttachFileIcon />}
                  sx={{ mt: 1 }}
                >
                  {formOperacion.nombreArchivo || "Adjuntar comprobante"}
                  <input
                    type="file"
                    hidden
                    onChange={handleFileChange}
                    accept="image/*,.pdf"
                  />
                </Button>
                {formOperacion.nombreArchivo && (
                  <Typography variant="caption" display="block" sx={{ mt: 1 }}>
                    Archivo seleccionado: {formOperacion.nombreArchivo}
                  </Typography>
                )}
              </Grid>
            </Grid>
          </Box>
        </DialogContent>
        
        <DialogActions>
          <Button onClick={handleCloseFormOperacion}>Cancelar</Button>
          <Button 
            onClick={handleGuardarOperacion}
            variant="contained"
            color="primary"
            disabled={!formOperacion.tipoServicio || formOperacion.monto <= 0 || 
                     (formOperacion.tipo === 'transferencia' && !formOperacion.cuentaBancariaId) ||
                     (formOperacion.tipo === 'pos' && (!formOperacion.codigoBarrasPos || !formOperacion.numeroComprobante))}
          >
            Guardar Operación
          </Button>
        </DialogActions>
      </Dialog>
      
      {/* Diálogo de confirmación para eliminar operación */}
      <Dialog 
        open={confirmarEliminarOperacionId !== null} 
        onClose={cancelarEliminacion}
      >
        <DialogTitle>Confirmar Eliminación</DialogTitle>
        <DialogContent>
          <DialogContentText>
            ¿Está seguro que desea eliminar esta operación bancaria?
          </DialogContentText>
        </DialogContent>
        <DialogActions>
          <Button onClick={cancelarEliminacion} color="primary">
            Cancelar
          </Button>
          <Button onClick={confirmarEliminacion} color="error" autoFocus>
            Eliminar
          </Button>
        </DialogActions>
      </Dialog>
      
      {/* Snackbar para mensajes de éxito */}
      <Snackbar 
        open={!!successMessage} 
        autoHideDuration={6000} 
        onClose={() => setSuccessMessage('')}
        anchorOrigin={{ vertical: 'top', horizontal: 'center' }}
      >
        <Alert onClose={() => setSuccessMessage('')} severity="success" variant="filled">
          {successMessage}
        </Alert>
      </Snackbar>
      
      {/* Diálogo de Retiros */}
      <Dialog
        open={retirosDialogOpen}
        onClose={() => setRetirosDialogOpen(false)}
        maxWidth="sm"
        fullWidth
        sx={{ '& .MuiDialog-paper': { bgcolor: '#333', color: 'white' } }}
      >
        <DialogTitle sx={{ pb: 1 }}>
          Registrar Retiro de Caja
          {cajaSeleccionada && (
            <Typography variant="subtitle2" color="text.secondary">
              {formatearIdCaja(cajaSeleccionada.id)}
            </Typography>
          )}
        </DialogTitle>
        <DialogContent sx={{ pt: 0 }}>
          <form autoComplete="off">
            <Box sx={{ pt: 1 }}>
              <Grid container spacing={1.5}>
                {/* Montos por moneda */}
                <Grid item xs={12} sx={{ pb: 0.5, pt: 1 }}>
                  <Typography variant="subtitle1" fontWeight="bold" sx={{ mb: 0 }}>
                    Montos a retirar
                  </Typography>
                </Grid>
                
                {/* Guaraníes */}
                <Grid item xs={12}>
                  <TextField
                    fullWidth
                    label="Monto en Guaraníes"
                    name="montoPYG"
                    inputRef={(ref) => registerInputRef('montoPYG', ref)}
                    value={formRetiro.montoPYG}
                    autoComplete="off"
                    onChange={(e) => {
                      // Solo aceptar números
                      const value = e.target.value.replace(/[^\d]/g, '');
                      // Formatear con separadores de miles
                      const formattedValue = value ? Number(value).toLocaleString('es-PY') : '';
                      setFormRetiro(prev => ({
                        ...prev,
                        montoPYG: formattedValue
                      }));
                    }}
                    onClick={handleInputClick}
                    onKeyDown={(e) => handleKeyDown(e, 'montoBRL')}
                    InputProps={{
                      startAdornment: <Typography variant="body2" sx={{ mr: 1 }}>₲</Typography>,
                    }}
                    helperText="Ingrese el monto en guaraníes a retirar"
                    size="small"
                    sx={{ 
                      '& .MuiInputBase-root': { bgcolor: '#444' },
                      '& .MuiInputBase-input': { color: 'white' },
                      '& .MuiInputLabel-root': { color: '#ccc' },
                      '& .MuiFormHelperText-root': { fontSize: '0.7rem', mt: 0.5 }
                    }}
                  />
                </Grid>
                
                {/* Reales */}
                <Grid item xs={12}>
                  <TextField
                    fullWidth
                    label="Monto en Reales"
                    name="montoBRL"
                    inputRef={(ref) => registerInputRef('montoBRL', ref)}
                    value={formRetiro.montoBRL}
                    autoComplete="off"
                    onChange={(e) => {
                      // Solo aceptar números y una coma
                      const value = e.target.value.replace(/[^\d,]/g, '');
                      let formattedValue = '';
                      
                      if (value.includes(',')) {
                        const parts = value.split(',');
                        const integerPart = parts[0] ? Number(parts[0]).toLocaleString('es-PY') : '0';
                        const decimalPart = parts[1].substring(0, 2); // Limitar a 2 decimales
                        formattedValue = `${integerPart},${decimalPart}`;
                      } else {
                        formattedValue = value ? Number(value).toLocaleString('es-PY') : '';
                      }
                      
                      setFormRetiro(prev => ({
                        ...prev,
                        montoBRL: formattedValue
                      }));
                    }}
                    onClick={handleInputClick}
                    onKeyDown={(e) => handleKeyDown(e, 'montoUSD')}
                    InputProps={{
                      startAdornment: <Typography variant="body2" sx={{ mr: 1 }}>R$</Typography>,
                    }}
                    helperText="Ingrese el monto en reales a retirar"
                    size="small"
                    sx={{ 
                      '& .MuiInputBase-root': { bgcolor: '#444' },
                      '& .MuiInputBase-input': { color: 'white' },
                      '& .MuiInputLabel-root': { color: '#ccc' },
                      '& .MuiFormHelperText-root': { fontSize: '0.7rem', mt: 0.5 }
                    }}
                  />
                </Grid>
                
                {/* Dólares */}
                <Grid item xs={12}>
                  <TextField
                    fullWidth
                    label="Monto en Dólares"
                    name="montoUSD"
                    inputRef={(ref) => registerInputRef('montoUSD', ref)}
                    value={formRetiro.montoUSD}
                    autoComplete="off"
                    onChange={(e) => {
                      // Solo aceptar números y una coma
                      const value = e.target.value.replace(/[^\d,]/g, '');
                      let formattedValue = '';
                      
                      if (value.includes(',')) {
                        const parts = value.split(',');
                        const integerPart = parts[0] ? Number(parts[0]).toLocaleString('es-PY') : '0';
                        const decimalPart = parts[1].substring(0, 2); // Limitar a 2 decimales
                        formattedValue = `${integerPart},${decimalPart}`;
                      } else {
                        formattedValue = value ? Number(value).toLocaleString('es-PY') : '';
                      }
                      
                      setFormRetiro(prev => ({
                        ...prev,
                        montoUSD: formattedValue
                      }));
                    }}
                    onClick={handleInputClick}
                    onKeyDown={(e) => handleKeyDown(e, 'busquedaPersona')}
                    InputProps={{
                      startAdornment: <Typography variant="body2" sx={{ mr: 1 }}>US$</Typography>,
                    }}
                    helperText="Ingrese el monto en dólares a retirar"
                    size="small"
                    sx={{ 
                      '& .MuiInputBase-root': { bgcolor: '#444' },
                      '& .MuiInputBase-input': { color: 'white' },
                      '& .MuiInputLabel-root': { color: '#ccc' },
                      '& .MuiFormHelperText-root': { fontSize: '0.7rem', mt: 0.5 }
                    }}
                  />
                </Grid>
                
                {/* Persona que recibe */}
                <Grid item xs={12} sx={{ pt: 1, pb: 0.5 }}>
                  <Typography variant="subtitle1" fontWeight="bold" sx={{ mb: 0 }}>
                    Persona que recibe
                  </Typography>
                </Grid>
                <Grid item xs={12}>
                  <TextField
                    fullWidth
                    label="Buscar por nombre o documento"
                    inputRef={(ref) => registerInputRef('busquedaPersona', ref)}
                    value={busquedaPersona}
                    autoComplete="off"
                    onChange={handleBusquedaPersonaChange}
                    onClick={(e) => {
                      handleInputClick(e);
                      // Mostrar todas las personas disponibles al hacer clic
                      setPersonasBusqueda(personasDisponibles.map(p => ({
                        id: p.id.toString(),
                        nombre: p.nombreCompleto,
                        tipo: p.tipo.toLowerCase() as 'funcionario' | 'vip'
                      })));
                    }}
                    onKeyDown={(e) => handleKeyDown(e, 'observacion')}
                    size="small"
                    sx={{ 
                      '& .MuiInputBase-root': { bgcolor: '#444' },
                      '& .MuiInputBase-input': { color: 'white' },
                      '& .MuiInputLabel-root': { color: '#ccc' },
                      mb: 1
                    }}
                    InputProps={{
                      endAdornment: buscandoPersonas ? (
                        <CircularProgress size={16} sx={{ color: 'white' }} />
                      ) : null,
                    }}
                  />
                  
                  {personasBusqueda.length > 0 && !formRetiro.personaId && (
                    <Paper 
                      sx={{ 
                        width: '100%', 
                        maxHeight: 150,
                        overflow: 'auto',
                        bgcolor: '#444',
                        color: 'white',
                        mb: 1,
                        borderRadius: 1
                      }}
                    >
                      <List dense sx={{ p: 0 }}>
                        {personasBusqueda.map(persona => (
                          <ListItem 
                            key={persona.id} 
                            button 
                            onClick={() => seleccionarPersona(persona)}
                            sx={{ 
                              py: 0.8,
                              borderBottom: '1px solid #555',
                              '&:hover': {
                                bgcolor: '#555'
                              }
                            }}
                          >
                            <ListItemText 
                              primary={persona.nombre}
                              secondary={`${persona.id} - ${persona.tipo === 'funcionario' ? 'Cliente VIP' : 'Cliente VIP'}`}
                              primaryTypographyProps={{ 
                                fontSize: '0.9rem',
                                fontWeight: 'bold',
                                color: 'white'
                              }}
                              secondaryTypographyProps={{ 
                                fontSize: '0.75rem', 
                                color: '#aaa' 
                              }}
                            />
                          </ListItem>
                        ))}
                      </List>
                    </Paper>
                  )}
                  
                  {formRetiro.personaId && (
                    <Paper variant="outlined" sx={{ p: 1, bgcolor: '#444', borderColor: '#555', mb: 1 }}>
                      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                        <Box>
                          <Typography sx={{ fontSize: '0.9rem', fontWeight: 'bold' }}>{formRetiro.personaNombre}</Typography>
                          <Typography variant="caption" color="#aaa" sx={{ fontSize: '0.75rem' }}>
                            {formRetiro.personaId} - Cliente VIP
                          </Typography>
                        </Box>
                        <Button 
                          size="small" 
                          variant="text" 
                          sx={{ 
                            fontSize: '0.7rem', 
                            color: '#0099cc', 
                            p: 0, 
                            minWidth: 'auto'
                          }}
                          onClick={() => {
                            setFormRetiro(prev => ({
                              ...prev,
                              personaId: '',
                              personaNombre: ''
                            }));
                            setPersonaSeleccionada(null);
                            // Mostrar todas las personas disponibles
                            setPersonasBusqueda(personasDisponibles.map(p => ({
                              id: p.id.toString(),
                              nombre: p.nombreCompleto,
                              tipo: p.tipo.toLowerCase() as 'funcionario' | 'vip'
                            })));
                          }}
                        >
                          Cambiar
                        </Button>
                      </Box>
                    </Paper>
                  )}
                </Grid>
                
                {/* Observaciones */}
                <Grid item xs={12} sx={{ pt: 1, pb: 0.5 }}>
                  <Typography variant="subtitle1" fontWeight="bold" sx={{ mb: 0 }}>
                    Información adicional
                  </Typography>
                </Grid>
                <Grid item xs={12}>
                  <TextField
                    fullWidth
                    label="Observaciones"
                    name="observacion"
                    inputRef={(ref) => registerInputRef('observacion', ref)}
                    value={formRetiro.observacion}
                    autoComplete="off"
                    onChange={(e) => {
                      // Convertir a mayúsculas
                      const value = e.target.value.toUpperCase();
                      setFormRetiro(prev => ({
                        ...prev,
                        observacion: value
                      }));
                    }}
                    onClick={handleInputClick}
                    onKeyDown={(e) => {
                      if (e.key === 'Enter') {
                        e.preventDefault();
                        // Verificar si el botón de guardar está habilitado
                        const guardarHabilitado = 
                          (formRetiro.montoPYG || formRetiro.montoBRL || formRetiro.montoUSD) && 
                          formRetiro.personaId && 
                          !loading;
                        
                        if (guardarHabilitado) {
                          // Ejecutar directamente la función de guardar
                          handleGuardarRetiro();
                        } else {
                          // Si no está habilitado, no hacemos nada o mostramos mensaje
                          console.log('No se puede guardar: falta información o está cargando');
                        }
                      } else {
                        // Comportamiento normal para otras teclas
                        handleKeyDown(e, 'guardarRetiro');
                      }
                    }}
                    multiline
                    rows={2}
                    helperText="Comentarios adicionales (opcional)"
                    size="small"
                    sx={{ 
                      '& .MuiInputBase-root': { bgcolor: '#444' },
                      '& .MuiInputBase-input': { color: 'white' },
                      '& .MuiInputLabel-root': { color: '#ccc' },
                      '& .MuiFormHelperText-root': { fontSize: '0.7rem', mt: 0.5 }
                    }}
                  />
                </Grid>
              </Grid>
            </Box>
          </form>
        </DialogContent>
        <DialogActions sx={{ px: 3, pb: 2, pt: 1 }}>
          <Button 
            onClick={() => setRetirosDialogOpen(false)} 
            variant="outlined"
            sx={{ 
              minWidth: 100,
              borderColor: '#0099cc',
              color: '#0099cc'
            }}
          >
            CANCELAR
          </Button>
          <Button 
            onClick={handleGuardarRetiro}
            variant="contained"
            color="primary"
            ref={(ref) => registerInputRef('guardarRetiro', ref)}
            disabled={(!formRetiro.montoPYG && !formRetiro.montoBRL && !formRetiro.montoUSD) || 
                     !formRetiro.personaId || loading}
            sx={{ 
              minWidth: 160,
              bgcolor: '#777777',
              '&:hover': { bgcolor: '#888888' }
            }}
          >
            {loading ? <CircularProgress size={20} /> : 'GUARDAR RETIRO'}
          </Button>
        </DialogActions>
      </Dialog>
      
      {/* Diálogo de Lista de Retiros */}
      <Dialog
        open={listaRetirosDialogOpen}
        onClose={handleCloseListaRetiros}
        maxWidth="md"
        fullWidth
      >
        <DialogTitle>
          Retiros de Caja
          {cajaSeleccionada && (
            <Typography variant="subtitle2" color="text.secondary">
              {formatearIdCaja(cajaSeleccionada.id)}
            </Typography>
          )}
        </DialogTitle>
        <DialogContent>
          <Box sx={{ display: 'flex', justifyContent: 'flex-end', mb: 2 }}>
            <Button
              variant="contained"
              color="primary"
              startIcon={<AddIcon />}
              onClick={handleNuevoRetiro}
            >
              Nuevo Retiro
            </Button>
          </Box>
          
          {retiros.length === 0 ? (
            <Alert severity="info" sx={{ mt: 2 }}>
              No hay retiros registrados para esta caja.
            </Alert>
          ) : (
            <TableContainer component={Paper}>
              <Table size="small">
                <TableHead>
                  <TableRow>
                    <TableCell>Fecha</TableCell>
                    <TableCell>Persona</TableCell>
                    <TableCell align="right">Guaraníes</TableCell>
                    <TableCell align="right">Reales</TableCell>
                    <TableCell align="right">Dólares</TableCell>
                    <TableCell>Observación</TableCell>
                    <TableCell align="center">Acciones</TableCell>
                  </TableRow>
                </TableHead>
                <TableBody>
                  {retiros.map((retiro) => (
                    <TableRow key={retiro.id}>
                      <TableCell>{retiro.fecha}</TableCell>
                      <TableCell>{retiro.personaNombre}</TableCell>
                      <TableCell align="right">
                        {retiro.montoPYG > 0 ? `${formatearMontoConSeparadores(retiro.montoPYG)} ₲` : '-'}
                      </TableCell>
                      <TableCell align="right">
                        {retiro.montoBRL > 0 ? `R$ ${new Intl.NumberFormat('es-PY', { minimumFractionDigits: 2, maximumFractionDigits: 2 }).format(retiro.montoBRL)}` : '-'}
                      </TableCell>
                      <TableCell align="right">
                        {retiro.montoUSD > 0 ? `US$ ${new Intl.NumberFormat('es-PY', { minimumFractionDigits: 2, maximumFractionDigits: 2 }).format(retiro.montoUSD)}` : '-'}
                      </TableCell>
                      <TableCell>{retiro.observacion}</TableCell>
                      <TableCell align="center">
                        <IconButton
                          size="small"
                          color="error"
                          onClick={() => handleEliminarRetiro(retiro.id)}
                        >
                          <DeleteIcon fontSize="small" />
                        </IconButton>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </TableContainer>
          )}
        </DialogContent>
        <DialogActions>
          <Button onClick={handleCloseListaRetiros}>
            Cerrar
          </Button>
        </DialogActions>
      </Dialog>
      
      {/* Diálogo de confirmación para eliminar retiro */}
      <Dialog 
        open={confirmarEliminarRetiroId !== null} 
        onClose={cancelarEliminacionRetiro}
      >
        <DialogTitle>Confirmar Eliminación</DialogTitle>
        <DialogContent>
          <DialogContentText>
            ¿Está seguro que desea eliminar este retiro?
          </DialogContentText>
        </DialogContent>
        <DialogActions>
          <Button onClick={cancelarEliminacionRetiro} color="primary">
            Cancelar
          </Button>
          <Button onClick={confirmarEliminacionRetiro} color="error" autoFocus>
            Eliminar
          </Button>
        </DialogActions>
      </Dialog>
      
      {/* Diálogo de Pagos (formulario) */}
      <Dialog
        open={pagosDialogOpen}
        onClose={() => setPagosDialogOpen(false)}
        maxWidth="sm"
        fullWidth
        sx={{ '& .MuiDialog-paper': { bgcolor: '#333', color: 'white' } }}
      >
        <DialogTitle sx={{ pb: 1 }}>
          Registrar Pago de Caja
          {cajaSeleccionada && (
            <Typography variant="subtitle2" color="text.secondary">
              {formatearIdCaja(cajaSeleccionada.id)}
            </Typography>
          )}
        </DialogTitle>
        <DialogContent sx={{ pt: 0 }}>
          <form autoComplete="off">
            <Box sx={{ pt: 1 }}>
              <Grid container spacing={1.5}>
                {/* Montos por moneda */}
                <Grid item xs={12} sx={{ pb: 0.5, pt: 1 }}>
                  <Typography variant="subtitle1" fontWeight="bold" sx={{ mb: 0 }}>
                    Montos a pagar
                  </Typography>
                </Grid>
                
                {/* Guaraníes */}
                <Grid item xs={12}>
                  <TextField
                    fullWidth
                    label="Monto en Guaraníes"
                    name="montoPYG"
                    inputRef={(ref) => registerInputRef('pagoMontoPYG', ref)}
                    value={formPago.montoPYG}
                    autoComplete="off"
                    onChange={(e) => {
                      // Solo aceptar números
                      const value = e.target.value.replace(/[^\d]/g, '');
                      // Formatear con separadores de miles
                      const formattedValue = value ? Number(value).toLocaleString('es-PY') : '';
                      setFormPago(prev => ({
                        ...prev,
                        montoPYG: formattedValue
                      }));
                    }}
                    onClick={handleInputClick}
                    onKeyDown={(e) => handleKeyDown(e, 'pagoMontoBRL')}
                    InputProps={{
                      startAdornment: <Typography variant="body2" sx={{ mr: 1 }}>₲</Typography>,
                    }}
                    helperText="Ingrese el monto en guaraníes a pagar"
                    size="small"
                    sx={{ 
                      '& .MuiInputBase-root': { bgcolor: '#444' },
                      '& .MuiInputBase-input': { color: 'white' },
                      '& .MuiInputLabel-root': { color: '#ccc' },
                      '& .MuiFormHelperText-root': { fontSize: '0.7rem', mt: 0.5 }
                    }}
                  />
                </Grid>
                
                {/* Reales */}
                <Grid item xs={12}>
                  <TextField
                    fullWidth
                    label="Monto en Reales"
                    name="montoBRL"
                    inputRef={(ref) => registerInputRef('pagoMontoBRL', ref)}
                    value={formPago.montoBRL}
                    autoComplete="off"
                    onChange={(e) => {
                      // Solo aceptar números y una coma
                      const value = e.target.value.replace(/[^\d,]/g, '');
                      let formattedValue = '';
                      
                      if (value.includes(',')) {
                        const parts = value.split(',');
                        const integerPart = parts[0] ? Number(parts[0]).toLocaleString('es-PY') : '0';
                        const decimalPart = parts[1].substring(0, 2); // Limitar a 2 decimales
                        formattedValue = `${integerPart},${decimalPart}`;
                      } else {
                        formattedValue = value ? Number(value).toLocaleString('es-PY') : '';
                      }
                      
                      setFormPago(prev => ({
                        ...prev,
                        montoBRL: formattedValue
                      }));
                    }}
                    onClick={handleInputClick}
                    onKeyDown={(e) => handleKeyDown(e, 'pagoMontoUSD')}
                    InputProps={{
                      startAdornment: <Typography variant="body2" sx={{ mr: 1 }}>R$</Typography>,
                    }}
                    helperText="Ingrese el monto en reales a pagar"
                    size="small"
                    sx={{ 
                      '& .MuiInputBase-root': { bgcolor: '#444' },
                      '& .MuiInputBase-input': { color: 'white' },
                      '& .MuiInputLabel-root': { color: '#ccc' },
                      '& .MuiFormHelperText-root': { fontSize: '0.7rem', mt: 0.5 }
                    }}
                  />
                </Grid>
                
                {/* Dólares */}
                <Grid item xs={12}>
                  <TextField
                    fullWidth
                    label="Monto en Dólares"
                    name="montoUSD"
                    inputRef={(ref) => registerInputRef('pagoMontoUSD', ref)}
                    value={formPago.montoUSD}
                    autoComplete="off"
                    onChange={(e) => {
                      // Solo aceptar números y una coma
                      const value = e.target.value.replace(/[^\d,]/g, '');
                      let formattedValue = '';
                      
                      if (value.includes(',')) {
                        const parts = value.split(',');
                        const integerPart = parts[0] ? Number(parts[0]).toLocaleString('es-PY') : '0';
                        const decimalPart = parts[1].substring(0, 2); // Limitar a 2 decimales
                        formattedValue = `${integerPart},${decimalPart}`;
                      } else {
                        formattedValue = value ? Number(value).toLocaleString('es-PY') : '';
                      }
                      
                      setFormPago(prev => ({
                        ...prev,
                        montoUSD: formattedValue
                      }));
                    }}
                    onClick={handleInputClick}
                    onKeyDown={(e) => handleKeyDown(e, 'pagoBusquedaPersona')}
                    InputProps={{
                      startAdornment: <Typography variant="body2" sx={{ mr: 1 }}>US$</Typography>,
                    }}
                    helperText="Ingrese el monto en dólares a pagar"
                    size="small"
                    sx={{ 
                      '& .MuiInputBase-root': { bgcolor: '#444' },
                      '& .MuiInputBase-input': { color: 'white' },
                      '& .MuiInputLabel-root': { color: '#ccc' },
                      '& .MuiFormHelperText-root': { fontSize: '0.7rem', mt: 0.5 }
                    }}
                  />
                </Grid>
                
                {/* Persona que recibe */}
                <Grid item xs={12} sx={{ pt: 1, pb: 0.5 }}>
                  <Typography variant="subtitle1" fontWeight="bold" sx={{ mb: 0 }}>
                    Persona que recibe el pago
                  </Typography>
                </Grid>
                <Grid item xs={12}>
                  <TextField
                    fullWidth
                    label="Buscar por nombre o documento"
                    inputRef={(ref) => registerInputRef('pagoBusquedaPersona', ref)}
                    value={busquedaPersona}
                    autoComplete="off"
                    onChange={handleBusquedaPersonaChange}
                    onClick={(e) => {
                      handleInputClick(e);
                      loadPersonasElegibles(); // Cargar personas al hacer click
                    }}
                    onKeyDown={(e) => handleKeyDown(e, 'pagoObservacion')}
                    size="small"
                    sx={{ 
                      '& .MuiInputBase-root': { bgcolor: '#444' },
                      '& .MuiInputBase-input': { color: 'white' },
                      '& .MuiInputLabel-root': { color: '#ccc' },
                      '& .MuiFormHelperText-root': { fontSize: '0.7rem', mt: 0.5 }
                    }}
                  />
                  
                  {/* Lista desplegable de personas */}
                  {personasBusqueda.length > 0 && (
                    <Paper 
                      sx={{ 
                        mt: 0.5, 
                        maxHeight: 200, 
                        overflow: 'auto',
                        bgcolor: '#555',
                        position: 'absolute',
                        zIndex: 9999,
                        width: 'calc(100% - 24px)',
                      }}
                    >
                      <List dense>
                        {buscandoPersonas ? (
                          <ListItem>
                            <CircularProgress size={20} sx={{ mr: 1 }} />
                            <ListItemText primary="Buscando personas..." />
                          </ListItem>
                        ) : (
                          personasBusqueda.map(persona => (
                            <ListItem 
                              key={persona.id}
                              button
                              onClick={() => {
                                seleccionarPersona(persona);
                                setFormPago(prev => ({
                                  ...prev,
                                  personaId: persona.id,
                                  personaNombre: persona.nombre
                                }));
                                // Mover foco a observaciones
                                setTimeout(() => {
                                  const nextField = inputRefs['pagoObservacion'];
                                  if (nextField) nextField.focus();
                                }, 100);
                              }}
                              sx={{ 
                                bgcolor: '#555',
                                '&:hover': { bgcolor: '#666' },
                                borderBottom: '1px solid #444'
                              }}
                            >
                              <ListItemText 
                                primary={
                                  <Typography color="white">
                                    {persona.nombre}
                                  </Typography>
                                }
                                secondary={
                                  <Typography variant="caption" color="#ccc">
                                    {persona.tipo === 'funcionario' ? 'Funcionario' : 'VIP'}
                                  </Typography>
                                }
                              />
                            </ListItem>
                          ))
                        )}
                      </List>
                    </Paper>
                  )}
                </Grid>
                
                {formPago.personaNombre && (
                  <Grid item xs={12}>
                    <Paper 
                      variant="outlined" 
                      sx={{ 
                        p: 1, 
                        bgcolor: 'rgba(0,100,0,0.2)', 
                        border: '1px solid rgba(0,255,0,0.2)',
                        display: 'flex',
                        alignItems: 'center'
                      }}
                    >
                      <PersonIcon sx={{ mr: 1, color: '#4caf50' }} />
                      <Typography variant="body2">
                        {formPago.personaNombre}
                      </Typography>
                    </Paper>
                  </Grid>
                )}
                
                {/* Observaciones */}
                <Grid item xs={12} sx={{ pt: 1, pb: 0.5 }}>
                  <Typography variant="subtitle1" fontWeight="bold" sx={{ mb: 0 }}>
                    Observaciones
                  </Typography>
                </Grid>
                <Grid item xs={12}>
                  <TextField
                    fullWidth
                    label="Observaciones"
                    name="observacion"
                    inputRef={(ref) => registerInputRef('pagoObservacion', ref)}
                    value={formPago.observacion}
                    autoComplete="off"
                    onChange={(e) => {
                      // Convertir el texto a mayúsculas
                      setFormPago(prev => ({
                        ...prev,
                        observacion: e.target.value.toUpperCase()
                      }));
                    }}
                    onClick={handleInputClick}
                    onKeyDown={(e) => handleKeyDown(e, 'guardarPago')}
                    multiline
                    rows={2}
                    placeholder="Ingrese información adicional sobre el pago"
                    size="small"
                    sx={{ 
                      '& .MuiInputBase-root': { bgcolor: '#444' },
                      '& .MuiInputBase-input': { color: 'white' },
                      '& .MuiInputLabel-root': { color: '#ccc' }
                    }}
                  />
                </Grid>
              </Grid>
            </Box>
          </form>
        </DialogContent>
        <DialogActions sx={{ px: 3, pb: 2, pt: 1 }}>
          <Button 
            onClick={() => {
              setPagosDialogOpen(false);
              setListaPagosDialogOpen(true);
            }} 
            variant="outlined"
            sx={{ 
              minWidth: 100,
              borderColor: '#0099cc',
              color: '#0099cc'
            }}
          >
            CANCELAR
          </Button>
          <Button 
            onClick={handleGuardarPago}
            variant="contained"
            color="primary"
            ref={(ref) => registerInputRef('guardarPago', ref)}
            disabled={(!formPago.montoPYG && !formPago.montoBRL && !formPago.montoUSD) || 
                     !formPago.personaId || loading}
            sx={{ 
              minWidth: 160,
              bgcolor: '#777777',
              '&:hover': { bgcolor: '#888888' },
              '&.Mui-disabled': { bgcolor: 'rgba(255,255,255,0.12)', color: 'rgba(255,255,255,0.3)' }
            }}
          >
            {loading ? <CircularProgress size={20} /> : 'GUARDAR PAGO'}
          </Button>
        </DialogActions>
      </Dialog>
      
      {/* Diálogo de Lista de Pagos */}
      <Dialog
        open={listaPagosDialogOpen}
        onClose={handleCloseListaPagos}
        maxWidth="md"
        fullWidth
      >
        <DialogTitle>
          Pagos de Caja
          {cajaSeleccionada && (
            <Typography variant="subtitle2" color="text.secondary">
              {formatearIdCaja(cajaSeleccionada.id)}
            </Typography>
          )}
        </DialogTitle>
        <DialogContent>
          <Box sx={{ display: 'flex', justifyContent: 'flex-end', mb: 2 }}>
            <Button
              variant="contained"
              color="primary"
              startIcon={<AddIcon />}
              onClick={handleNuevoPago}
            >
              Nuevo Pago
            </Button>
          </Box>
          
          {pagos.length === 0 ? (
            <Alert severity="info" sx={{ mt: 2 }}>
              No hay pagos registrados para esta caja.
            </Alert>
          ) : (
            <TableContainer component={Paper}>
              <Table size="small">
                <TableHead>
                  <TableRow>
                    <TableCell>Fecha</TableCell>
                    <TableCell>Persona</TableCell>
                    <TableCell align="right">Guaraníes</TableCell>
                    <TableCell align="right">Reales</TableCell>
                    <TableCell align="right">Dólares</TableCell>
                    <TableCell>Observación</TableCell>
                    <TableCell align="center">Acciones</TableCell>
                  </TableRow>
                </TableHead>
                <TableBody>
                  {pagos.map((pago) => (
                    <TableRow key={pago.id}>
                      <TableCell>{pago.fecha}</TableCell>
                      <TableCell>{pago.personaNombre}</TableCell>
                      <TableCell align="right">
                        {pago.montoPYG > 0 ? `${formatearMontoConSeparadores(pago.montoPYG)} ₲` : '-'}
                      </TableCell>
                      <TableCell align="right">
                        {pago.montoBRL > 0 ? `R$ ${new Intl.NumberFormat('es-PY', { minimumFractionDigits: 2, maximumFractionDigits: 2 }).format(pago.montoBRL)}` : '-'}
                      </TableCell>
                      <TableCell align="right">
                        {pago.montoUSD > 0 ? `US$ ${new Intl.NumberFormat('es-PY', { minimumFractionDigits: 2, maximumFractionDigits: 2 }).format(pago.montoUSD)}` : '-'}
                      </TableCell>
                      <TableCell>{pago.observacion}</TableCell>
                      <TableCell align="center">
                        <IconButton
                          size="small"
                          color="error"
                          onClick={() => handleEliminarPago(pago.id)}
                        >
                          <DeleteIcon fontSize="small" />
                        </IconButton>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </TableContainer>
          )}
        </DialogContent>
        <DialogActions>
          <Button onClick={handleCloseListaPagos}>
            Cerrar
          </Button>
        </DialogActions>
      </Dialog>
      
      {/* Diálogo de confirmación para eliminar pago */}
      <Dialog 
        open={confirmarEliminarPagoId !== null} 
        onClose={cancelarEliminacionPago}
      >
        <DialogTitle>Confirmar Eliminación</DialogTitle>
        <DialogContent>
          <DialogContentText>
            ¿Está seguro que desea eliminar este pago?
          </DialogContentText>
        </DialogContent>
        <DialogActions>
          <Button onClick={cancelarEliminacionPago} color="primary">
            Cancelar
          </Button>
          <Button onClick={confirmarEliminacionPago} color="error" autoFocus>
            Eliminar
          </Button>
        </DialogActions>
      </Dialog>
    </Container>
  );
};

export default Cajas; 